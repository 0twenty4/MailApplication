package com.example.mailapplication;

import android.animation.Animator;
import android.animation.ValueAnimator;
import android.content.ContentResolver;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;

import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;

import android.text.Editable;
import android.text.TextWatcher;
import android.util.Base64;
import android.util.TypedValue;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.animation.Animation;
import android.webkit.WebResourceRequest;
import android.webkit.WebResourceResponse;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import static android.view.View.GONE;
import static android.view.View.VISIBLE;
import java.io.BufferedInputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.activation.CommandMap;
import javax.activation.DataHandler;
import javax.activation.MailcapCommandMap;
import javax.mail.Address;
import javax.mail.Flags;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Part;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.util.ByteArrayDataSource;

import java.io.InputStream;

public class EMailService  implements Animation.AnimationListener, ValueAnimator.AnimatorListener, ValueAnimator.AnimatorUpdateListener,
        View.OnClickListener, View.OnLongClickListener, View.OnFocusChangeListener, ViewTreeObserver.OnGlobalLayoutListener, View.OnTouchListener,
        TextWatcher,
        ViewGroup.OnHierarchyChangeListener,
        ViewTreeObserver.OnScrollChangedListener {
    private static String currentUserEMailAddress;
    private static String currentUserPassword;
    private static String[] replyEMailAddresses;
    private static AppCompatActivity activityCurrent;
    private static int activityCurrentFragmentLoadingLayoutId;
    private static final ArrayList<EMailMessage> eMailMessagesLoadedCurrent = new ArrayList<>();
    private static int displayedEMailMessagesCount;
    private static final Session session;
    private static ConfirmingDeletingMainMenu mainMenuConfirmingDeleting;
    private static boolean eMailMessageCurrentHasContentHtml;
    private static final ExecutorService executor=Executors.newSingleThreadExecutor();
    private static EMailMessage eMailMessageCurrent;
    private static boolean hasDisplayedMessages;
    private static boolean hasLogOut;
    private static boolean modeMainMenuDeleting;
    private static boolean modeMainMenuConfirmingDeleting;
    private static boolean areEMailMessagesDisplayedTicked;
    private static final ArrayList<EMailMessage> eMailMessagesDisplayedTicked=new ArrayList<>();
    private static int currentMainMenuScrollY;


    static {
        Properties properties = new Properties();
        properties.put("mail.transport.protocol", "smtp");
        properties.put("mail.smtp.host", "smtp.gmail.com");
        properties.put("mail.smtp.port", "587");
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.store.protocol", "imaps");
        properties.put("mail.imaps.host", "imap.gmail.com");
        properties.put("mail.imaps.port", "993");
        properties.put("mail.imaps.auth", "true");
        session = Session.getInstance(properties, null);
        MailcapCommandMap mailApplicationMailcapCommandMap = (MailcapCommandMap) CommandMap.getDefaultCommandMap();
        mailApplicationMailcapCommandMap.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
        mailApplicationMailcapCommandMap.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
        mailApplicationMailcapCommandMap.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
        mailApplicationMailcapCommandMap.addMailcap("image/*;; x-java-content-handler=com.sum.mail.handlers.image_mixed");
        mailApplicationMailcapCommandMap.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
        mailApplicationMailcapCommandMap.addMailcap("message/rfc822;; x-java-content-handler=com.mail.handlers.message_rfc822");
        CommandMap.setDefaultCommandMap(mailApplicationMailcapCommandMap);
    }

    public static String getCurrentUserEMailAddress() {
        return currentUserEMailAddress;
    }

    public static AppCompatActivity getActivityCurrent() {
        return activityCurrent;
    }

    public static int getActivityCurrentFragmentLoadingLayoutId() {
        return activityCurrentFragmentLoadingLayoutId;
    }

    public static void setReplyEMailAddresses(String[] eMailAddresses) {
        replyEMailAddresses=eMailAddresses;
    }

    public static String[] getReplyEMailAddresses() {
        return replyEMailAddresses;
    }

    public static void clearReplyEMailAddresses() {
        replyEMailAddresses=null;
    }

    public static boolean hasLogOut() {
        return hasLogOut;
    }

    public static void setCurrentActivity(AppCompatActivity activity, int viewGroup) {
        activityCurrent = activity;
        activityCurrentFragmentLoadingLayoutId = viewGroup;
    }

    public static void setModeMainMenuDeleting(boolean isOn) {
        modeMainMenuDeleting =isOn;
        final int viewVisibility;
        final int background;
        final float alphaTo;
        final ImageView mainMenuDelete=activityCurrent.findViewById(R.id.main_menu_delete);
        final ImageView mainMenuTick=activityCurrent.findViewById(R.id.main_menu_tick);
        if (isOn) {
            background=0;
            viewVisibility = VISIBLE;
            alphaTo=0;
            mainMenuDelete.setVisibility(VISIBLE);
            mainMenuDelete.animate()
                    .alpha(1)
                    .setDuration(100)
                    .setListener(null)
                    .start();
            mainMenuTick.setVisibility(VISIBLE);
            mainMenuTick.animate()
                    .alpha(1)
                    .setDuration(100)
                    .setListener(null)
                    .start();

        }
        else {
            final TypedValue backgroundOutValue=new TypedValue();
            activityCurrent.getApplicationContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground, backgroundOutValue, true);
            background=backgroundOutValue.resourceId;
            areEMailMessagesDisplayedTicked=false;
            viewVisibility = GONE;
            alphaTo=1;
            mainMenuDelete.animate()
                    .alpha(0)
                    .setDuration(100)
                    .setListener(new EMailService() {
                        public void onAnimationEnd(Animator animator) {
                            mainMenuDelete.setVisibility(GONE);
                        }
                    })
                    .start();
            mainMenuTick.animate()
                    .alpha(0)
                    .setDuration(100)
                    .setListener(new EMailService() {
                        public void onAnimationEnd(Animator animator) {
                            mainMenuTick.setVisibility(GONE);
                        }
                    })
                    .start();
        }
        for (EMailMessage eMailMessage:getDisplayedEMailMessages()) {
            final View eMailMessageView=eMailMessage.getView();
            ImageView eMailMessageDelete=eMailMessageView.findViewById(R.id.email_message_delete);
            eMailMessageDelete.setVisibility(viewVisibility);
            if (!isOn && eMailMessage.ticked) {
                eMailMessage.ticked = false;
                eMailMessagesDisplayedTicked.remove(eMailMessage);
                ImageView eMailMessageTick = eMailMessage.getView().findViewById(R.id.email_message_tick);
                eMailMessageTick.setVisibility(GONE);
                int white = activityCurrent.getColor(R.color.white);
                int grey = activityCurrent.getColor(R.color.bright_grey);
                ValueAnimator eMailMessageViewAnimator = ValueAnimator.ofArgb(grey, white).setDuration(300);
                eMailMessageViewAnimator.addUpdateListener(new EMailService() {
                    public void onAnimationUpdate(ValueAnimator animator) {
                        eMailMessageView.setBackgroundColor((int) animator.getAnimatedValue());
                    }
                });
                eMailMessageViewAnimator.addListener(new EMailService() {
                    public void onAnimationEnd(Animator animator) {
                        eMailMessageView.setBackgroundResource(background);
                    }
                });
                eMailMessageViewAnimator.start();
            } else
                eMailMessageView.setBackgroundResource(background);
        }
        ImageView mainMenuCompose=activityCurrent.findViewById(R.id.main_menu_compose);
        mainMenuCompose.animate()
                .alpha(alphaTo)
                .setDuration(100)
                .start();
    }

    public static boolean getModeMainMenuDeleting() {
        return modeMainMenuDeleting;
    }

    public static void setModeMainMenuConfirmingDeletingOn(EMailMessage onlyOneMessageToDelete) {
        if (onlyOneMessageToDelete!=null) {
            setConfirmingDeleting(true, onlyOneMessageToDelete);
        } else {
            int eMailMessagesDisplayedTickedAmount = eMailMessagesDisplayedTicked.size();
            if (eMailMessagesDisplayedTickedAmount > 1)
                setConfirmingDeleting(true, null);
            else {
                EMailMessage onlyOneEMailMessageToDelete = eMailMessagesDisplayedTicked.get(0);
                setConfirmingDeleting(true, onlyOneEMailMessageToDelete);
            }
        }
    }

    public static void setModeMainMenuConfirmingDeletingOff() {
        setConfirmingDeleting(false, null);
    }

    private static void setConfirmingDeleting(boolean isOn, EMailMessage onlyOneEMailMessageToDelete) {
        modeMainMenuConfirmingDeleting = isOn;
        if (mainMenuConfirmingDeleting == null)
            mainMenuConfirmingDeleting = new ConfirmingDeletingMainMenu();
        int eMailMessagesDisplayedTickedAmount=eMailMessagesDisplayedTicked.size();
        final FragmentTransaction currentActivityFragmentTransaction = activityCurrent.getSupportFragmentManager().beginTransaction();
        final View mainMenuClickLayout= activityCurrent.findViewById(R.id.main_menu_root_click_layout);
        final boolean viewsClickable;
        if (isOn) {
            if (onlyOneEMailMessageToDelete==null) {
                if (eMailMessagesDisplayedTickedAmount>1)
                    mainMenuConfirmingDeleting.setOnlyOneEMailMessageToDelete(null);
                else {
                    EMailMessage eMailMessageToDelete=eMailMessagesDisplayedTicked.get(0);
                    mainMenuConfirmingDeleting.setOnlyOneEMailMessageToDelete(eMailMessageToDelete);
                }
            } else {
                mainMenuConfirmingDeleting.setOnlyOneEMailMessageToDelete(onlyOneEMailMessageToDelete);
            }
            viewsClickable = false;
            int mainMenuConfirmingDeletingLayoutId = R.id.main_menu_confirming_deleting_layout;
            currentActivityFragmentTransaction
                    .add(mainMenuConfirmingDeletingLayoutId, mainMenuConfirmingDeleting)
                    .commit();
            mainMenuClickLayout.setVisibility(VISIBLE);
            mainMenuClickLayout.bringToFront();
        } else {
            viewsClickable = true;
            currentActivityFragmentTransaction
                    .remove(mainMenuConfirmingDeleting)
                    .commit();
            mainMenuClickLayout.setVisibility(GONE);
        }
        for (EMailMessage eMailMessage:getDisplayedEMailMessages()) {
            eMailMessage.setClickable(viewsClickable);
        }
        ViewGroup mainMenuTop= activityCurrent.findViewById(R.id.email_message_open_top);
        int mainMenuTopViewAmount=mainMenuTop.getChildCount();
        for (int index=0; index<mainMenuTopViewAmount; index++) {
            View mainMenuTopView=mainMenuTop.getChildAt(index);
            mainMenuTopView.setClickable(viewsClickable);
        }
    }

    public static boolean getModeMainMenuConfirmingDeleting() {
        return modeMainMenuConfirmingDeleting;
    }

    public static void setEMailMessagesDisplayedTicked(boolean ticked) {
        areEMailMessagesDisplayedTicked=ticked;
        final int white= activityCurrent.getColor(R.color.white);
        final int grey= activityCurrent.getColor(R.color.bright_grey);
        final ValueAnimator eMailMessageViewAnimator;
        if (ticked) {
            ArrayList<EMailMessage> eMailMessagesDisplayedNotTicked = new ArrayList<>();
            for (EMailMessage eMailMessage : getDisplayedEMailMessages()) {
                if (!eMailMessage.ticked)
                    eMailMessagesDisplayedNotTicked.add(eMailMessage);
            }
            eMailMessageViewAnimator=ValueAnimator.ofArgb(white, grey).setDuration(300);
            for (EMailMessage eMailMessage:eMailMessagesDisplayedNotTicked) {
                eMailMessage.ticked = true;
                addEMailMessagesDisplayedTicked(eMailMessage);
                View eMailMessageView = eMailMessage.getView();
                ImageView eMailMessageTick = eMailMessageView.findViewById(R.id.email_message_tick);
                eMailMessageTick.setVisibility(VISIBLE);
                eMailMessageViewAnimator.addUpdateListener(new EMailService() {
                    public void onAnimationUpdate(ValueAnimator animator) {
                        eMailMessageView.setBackgroundColor((int) animator.getAnimatedValue());
                    }
                });
            }
        } else {
            eMailMessageViewAnimator=ValueAnimator.ofArgb(grey, white).setDuration(300);
            for (EMailMessage eMailMessage:getDisplayedEMailMessages()) {
                eMailMessage.ticked = false;
                removeEMailMessagesDisplayedTicked(eMailMessage);
                final View eMailMessageView = eMailMessage.getView();
                ImageView eMailMessageTick = eMailMessageView.findViewById(R.id.email_message_tick);
                eMailMessageTick.setVisibility(GONE);
                eMailMessageViewAnimator.addUpdateListener(new EMailService() {
                    public void onAnimationUpdate(ValueAnimator animator) {
                        eMailMessageView.setBackgroundColor((int) animator.getAnimatedValue());
                    }
                });
            }
        }
        eMailMessageViewAnimator.start();
    }

    private static ArrayList<EMailMessage> getDisplayedEMailMessages() {
        FragmentManager activityCurrentFragmentManager=activityCurrent.getSupportFragmentManager();
        final ArrayList<EMailMessage> displayedEMailMessages=new ArrayList<>();
        for (int index=0; index<displayedEMailMessagesCount; index++) {
            EMailMessage displayedEMailMessage =(EMailMessage) activityCurrentFragmentManager.findFragmentByTag(String.valueOf(index));
            displayedEMailMessages.add(displayedEMailMessage);
        }
        return displayedEMailMessages;
    }

    public static boolean getAreEMailMessagesDisplayedTicked() {
        return areEMailMessagesDisplayedTicked;
    }

    public static int getEMailMessagesDisplayedTickedAmount() {
        return eMailMessagesDisplayedTicked.size();
    }

    public static void addEMailMessagesDisplayedTicked(EMailMessage eMailMessage) {
        eMailMessagesDisplayedTicked.add(eMailMessage);
    }

    public static void removeEMailMessagesDisplayedTicked(EMailMessage eMailMessage) {
        eMailMessagesDisplayedTicked.remove(eMailMessage);

    }

    public static void deleteMessage(EMailMessage onlyOneEMailMessageToDelete) {
        delete(onlyOneEMailMessageToDelete, null);
    }

    public static void deleteMessages() {
        ArrayList<EMailMessage> eMailMessagesToDelete=new ArrayList<>(eMailMessagesDisplayedTicked);
        delete(null, eMailMessagesToDelete);
    }

    public static void delete(EMailMessage onlyOneEMailMessageToDelete, ArrayList<EMailMessage> eMailMessagesToDelete) {
        setModeMainMenuConfirmingDeletingOff();
        setModeMainMenuDeleting(false);
        Fragment fragmentLoadingCurrent = new LoadingProgressBarCircle();
        activityCurrent.getSupportFragmentManager().beginTransaction()
                .add(activityCurrentFragmentLoadingLayoutId, fragmentLoadingCurrent)
                .commit();
        removeEMailMessagesLayoutViews();
        executor.execute((Runnable) () -> {
            try {
                Map.Entry<Folder, List<Message>> folderAndMessages=getFolderAndMessages();
                if (onlyOneEMailMessageToDelete!=null) {
                    Message message = onlyOneEMailMessageToDelete.message;
                    message.setFlag(Flags.Flag.DELETED, true);
                } else {
                    for (EMailMessage eMailMessage : eMailMessagesToDelete) {
                        Message message = eMailMessage.message;
                        message.setFlag(Flags.Flag.DELETED, true);
                    }
                }
                Folder folder=folderAndMessages.getKey();
                folder.close(true);
                loadMessages(0);
            } catch (Exception e) {
            }
            activityCurrent.runOnUiThread((Runnable) () -> {
                int eMailMessagesLayout = R.id.main_menu_email_messages_layout;
                TextView noMessages = activityCurrent.findViewById(R.id.no_messages);
                int noMessagesVisibility = noMessages.getVisibility();
                if (canDisplay(eMailMessagesLayout)) {
                    if (noMessagesVisibility == VISIBLE)
                        noMessages.setVisibility(GONE);
                    LoadMore loadMore = new LoadMore();
                    activityCurrent.getSupportFragmentManager().beginTransaction()
                            .add(eMailMessagesLayout, loadMore, "load more")
                            .commit();
                } else {
                    if (noMessages.getVisibility() == GONE)
                        noMessages.setVisibility(VISIBLE);
                }
                activityCurrent.getSupportFragmentManager().beginTransaction()
                        .remove(fragmentLoadingCurrent)
                        .commit();
            });
        });
    }

    public static void sendEMailMessage(HashMap<LayoutPart, String> recipients, TextView eMailMessageSubject, TextView eMailMessageText, ArrayList<EMailMessageComposing.Attachment> attachments) {
        View activityCurrentFragmentLoadingLayout=activityCurrent.findViewById(activityCurrentFragmentLoadingLayoutId);
        activityCurrentFragmentLoadingLayout.setVisibility(VISIBLE);
        Fragment fragmentLoadingCurrent=new EMailMessageComposing.EMailMessageSending();
        activityCurrent.getSupportFragmentManager().beginTransaction()
                .setCustomAnimations(R.anim.slide_from_right_to_middle, 0)
                .add(activityCurrentFragmentLoadingLayoutId, fragmentLoadingCurrent)
                .commitNow();
        activityCurrentFragmentLoadingLayout.postDelayed((Runnable) () -> {
            executor.execute((Runnable) () -> {
                try {
                    MimeMessage eMailMessage = new MimeMessage(session);
                    eMailMessage.setFrom(currentUserEMailAddress);
                    eMailMessage.setSubject(eMailMessageSubject.getText().toString());
                    MimeMultipart eMailMessageContent = new MimeMultipart();
                    MimeBodyPart eMailMessagePartText = new MimeBodyPart();
                    eMailMessagePartText.setText(eMailMessageText.getText().toString());
                    eMailMessageContent.addBodyPart(eMailMessagePartText);
                    if (attachments!=null) {
                        final ContentResolver contentResolver = activityCurrent.getContentResolver();
                        for (EMailMessageComposing.Attachment attachment : attachments) {
                            InputStream contentStream = contentResolver.openInputStream(attachment.content);
                            ArrayList<Byte> contentBytesList = new ArrayList<>();
                            do {
                                contentBytesList.add((byte) contentStream.read());
                            } while (contentStream.available() > 0);
                            contentStream.close();
                            byte[] contentBytesArray = new byte[contentBytesList.size()];
                            for (int index = 0; index < contentBytesArray.length; index++)
                                contentBytesArray[index] = contentBytesList.get(index);
                            MimeBodyPart eMailMessagePartAttachment = new MimeBodyPart();
                            eMailMessagePartAttachment.setDataHandler(new DataHandler(new ByteArrayDataSource(contentBytesArray, attachment.contentType)));
                            eMailMessagePartAttachment.setFileName(attachment.fileName.getText().toString());
                            eMailMessageContent.addBodyPart(eMailMessagePartAttachment);
                        }
                    }
                    final StringBuilder eMailAddressesTo=new StringBuilder();
                    final StringBuilder eMailAddressesBcc=new StringBuilder();
                    final StringBuilder eMailAddressesCc=new StringBuilder();
                    for (Map.Entry<LayoutPart, String> recipient:recipients.entrySet()) {
                        final String eMailAddress=recipient.getKey().eMailAddress;
                        final String recipientType=recipient.getValue();
                        if (recipientType.equals("To")) {
                            if (eMailAddressesTo.length() != 0) {
                                final String comma = ", ";
                                eMailAddressesTo.append(comma);
                            }
                            eMailAddressesTo.append(eMailAddress);
                        } else if (recipientType.equals("Bcc")) {
                            if (eMailAddressesCc.length()!=0) {
                                final String comma=", ";
                                eMailAddressesBcc.append(comma);
                            }
                            eMailAddressesBcc.append(eMailAddress);
                        } else {
                            if (eMailAddressesCc.length()!=0) {
                                final String comma=", ";
                                eMailAddressesCc.append(comma);
                            }
                            eMailAddressesCc.append(eMailAddress);
                        }
                    }
                    eMailMessage.setRecipients(Message.RecipientType.TO, eMailAddressesTo.toString());
                    eMailMessage.setRecipients(Message.RecipientType.BCC, eMailAddressesBcc.toString());
                    eMailMessage.setRecipients(Message.RecipientType.CC, eMailAddressesCc.toString());
                    eMailMessage.setContent(eMailMessageContent);
                    eMailMessage.saveChanges();
                    Transport.send(eMailMessage, currentUserEMailAddress, currentUserPassword);
                    activityCurrent.runOnUiThread((Runnable) () -> {
                        View eMailMessageComposingBack=activityCurrent.findViewById(R.id.email_message_composing_back);
                        eMailMessageComposingBack.performClick();
                    });
                } catch (Exception e) {
                    activityCurrent.runOnUiThread((Runnable) () -> {
                        activityCurrent.getSupportFragmentManager().beginTransaction()
                                .setCustomAnimations(0, R.anim.slide_from_middle_to_right)
                                .remove(fragmentLoadingCurrent)
                                .commitNow();
                    });
                }
            });
        }, 300);
    }

    public static void loadUser(String login, String password) {
        currentUserEMailAddress = login;
        currentUserPassword = password;
    }

    public static boolean fieldEmpty(String field) {
        return field.isEmpty();
    }

    public static boolean eMailAddressValid(String eMailAddress) {
        try {
            InternetAddress internetAddress = new InternetAddress(eMailAddress);
            internetAddress.validate();
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public static boolean passwordCorrect(String password) {
        boolean passwordCorrect=false;
        if (password.length() >= 8) {
            char[] charactersPasswordString = password.toCharArray();
            ArrayList<Character> symbolsPasswordString = new ArrayList<>();
            for (char character : charactersPasswordString) {
                if (character != ' ') symbolsPasswordString.add(character);
            }
            boolean hasNoSpace = true;
            if (charactersPasswordString.length != symbolsPasswordString.size()) {
                for (int i = 0; i < symbolsPasswordString.size(); i++) {
                    if (charactersPasswordString[i] == ' ') {
                        hasNoSpace = false;
                        break;
                    }
                }
            }
            if (hasNoSpace) {
                boolean hasNumber = false;
                boolean hasLetter = false;
                for (char character : charactersPasswordString) {
                    if (Character.isDigit(character)) {
                        hasNumber = true;
                        if (hasLetter) {
                            break;
                        }
                    } else if (Character.isLetter(character)) {
                        hasLetter = true;
                        if (hasNumber) {
                            passwordCorrect = true;
                            break;
                        }
                    }
                }
            }
        }
        if (passwordCorrect)
            return true;
        else
            return false;
    }

    public static void connectToNetwork() {
        executor.execute((Runnable) () -> {
            try {
                activityCurrent.runOnUiThread((Runnable) () -> {
                    Fragment fragmentLoadingCurrent = new Connecting();
                    activityCurrent.getSupportFragmentManager().beginTransaction()
                            .setCustomAnimations(R.anim.slide_from_right_to_middle, 0)
                            .add(activityCurrentFragmentLoadingLayoutId, fragmentLoadingCurrent, "connecting")
                            .commit();
                });
                Transport transport = session.getTransport();
                transport.connect(currentUserEMailAddress, currentUserPassword);
                activityCurrent.runOnUiThread((Runnable) () -> {
                    Fragment fragmentLoadingCurrent = new LoadingEMailMessages();
                    activityCurrent.getSupportFragmentManager().beginTransaction()
                            .replace(activityCurrentFragmentLoadingLayoutId, fragmentLoadingCurrent, "loadingMessages")
                            .commit();

                });
                loadMessages(0);
                activityCurrent.runOnUiThread((Runnable) () -> {
                    Intent intent = new Intent(activityCurrent, MenuMain.class);
                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
                    activityCurrent.startActivity(intent);
                });
            } catch (Exception e) {
                activityCurrent.runOnUiThread((Runnable) () -> {
                    TextView accountNotExist = activityCurrent.findViewById(R.id.account_not_exist);
                    accountNotExist.setVisibility(VISIBLE);
                    FragmentManager activityCurrentFragmentManager=activityCurrent.getSupportFragmentManager();
                    activityCurrentFragmentManager.beginTransaction()
                            .setCustomAnimations(0, R.anim.slide_from_middle_to_right)
                            .remove(activityCurrentFragmentManager.findFragmentByTag("connecting"))
                            .commit();
                });
            }
        });
    }

    private static Map.Entry<Folder, List<Message>> getFolderAndMessages() {
        try {
            Store store = session.getStore();
            store.connect(currentUserEMailAddress, currentUserPassword);
            Folder folder = store.getFolder("inbox");
            try {
                folder.open(Folder.READ_WRITE); // we need "try-catch" as folder may have been already opened
            } catch (MessagingException ignored) {}
            Message[] messages = folder.getMessages();
            List<Message> eMailMessages = Arrays.asList(messages);
            Collections.reverse(eMailMessages);
            HashMap<Folder, List<Message>> folderAndMessages = new HashMap<>();
            folderAndMessages.put(folder, eMailMessages);
            return folderAndMessages.entrySet().iterator().next();
        } catch (Exception e) {
            return null;
        }
    }

    private static void loadMessages(int messageCount) {
        try {
            Map.Entry<Folder, List<Message>> folderAndMessages= getFolderAndMessages();
            List<Message> messages=folderAndMessages.getValue();
            int messageToLoadIndex=displayedEMailMessagesCount;
            for (; messageCount < 20; messageCount++, messageToLoadIndex++) {
                Message receivedMessage = messages.get(messageToLoadIndex);
                EMailMessage eMailMessage= loadMessage(receivedMessage);
                eMailMessagesLoadedCurrent.add(eMailMessage);
            }
        } catch (Exception e) {}
    }

    public static void displayMessages(int eMailMessagesLayout) {
        if (!hasDisplayedMessages) {
            LoadingProgressBarCircle fragmentLoadingCurrent = new LoadingProgressBarCircle();
            activityCurrent.getSupportFragmentManager().beginTransaction()
                    .add(activityCurrentFragmentLoadingLayoutId, fragmentLoadingCurrent)
                    .commit();
            FragmentTransaction currentActivityFragmentTransaction = activityCurrent.getSupportFragmentManager().beginTransaction();
            if (canDisplay(eMailMessagesLayout)) {
                LoadMore loadMore = new LoadMore();
                currentActivityFragmentTransaction.add(eMailMessagesLayout, loadMore, "load more");
            } else {
                TextView noMessages = activityCurrent.findViewById(R.id.no_messages);
                noMessages.setVisibility(VISIBLE);
            }
            hasDisplayedMessages = true;
            currentActivityFragmentTransaction.remove(fragmentLoadingCurrent).commit();
        } else {
            returnDisplayedMessages(eMailMessagesLayout);
        }
    }

    public static void displayMoreMessages(int eMailMessagesLayout) {
        executor.execute((Runnable) () -> {
            if (eMailMessagesLoadedCurrent.isEmpty())
                loadMessages(0);
            activityCurrent.runOnUiThread((Runnable) () -> {
                FragmentManager activityCurrentFragmentManager=activityCurrent.getSupportFragmentManager();
                FragmentTransaction activityCurrentFragmentTransaction=activityCurrentFragmentManager.beginTransaction();
                if (canDisplay(eMailMessagesLayout)) {
                    activityCurrentFragmentTransaction
                            .remove(activityCurrentFragmentManager.findFragmentByTag("load more"))
                            .add(eMailMessagesLayout, new LoadMore(), "load more")
                            .commit();
                } else
                    activityCurrentFragmentTransaction
                            .remove(activityCurrentFragmentManager.findFragmentByTag("load more"))
                            .commit();
            });
        });
    }

    private static void display(int eMailMessagesLayout) {
        canDisplay(eMailMessagesLayout);
    }

    private static boolean canDisplay(int eMailMessagesLayout) {
        FragmentTransaction currentActivityFragmentTransaction = activityCurrent.getSupportFragmentManager().beginTransaction();
        Iterator<EMailMessage> eMailMessagesLoadedIterator = eMailMessagesLoadedCurrent.iterator();
        int messageCount = 0;
        while (eMailMessagesLoadedIterator.hasNext() && messageCount < 20) {
            EMailMessage eMailMessage = eMailMessagesLoadedIterator.next();
            currentActivityFragmentTransaction.add(eMailMessagesLayout, eMailMessage, String.valueOf(displayedEMailMessagesCount));
            eMailMessagesLoadedIterator.remove();
            displayedEMailMessagesCount++;
            messageCount++;
        }
        currentActivityFragmentTransaction.commit();
        if (messageCount > 0)
            return true;
        else
            return false;
    }

    public static boolean hasDisplayedMessages() {
        return hasDisplayedMessages;
    }

    private static void removeEMailMessagesLayoutViews() {
        FragmentManager activityCurrentFragmentManager=activityCurrent.getSupportFragmentManager();
        FragmentTransaction currentActivityFragmentTransaction = activityCurrent.getSupportFragmentManager().beginTransaction();
        for (EMailMessage eMailMessage : getDisplayedEMailMessages()) {
            currentActivityFragmentTransaction.remove(eMailMessage);
        }
        displayedEMailMessagesCount=0;
        System.out.println(activityCurrentFragmentManager.findFragmentByTag("load more"));
        currentActivityFragmentTransaction.remove(activityCurrentFragmentManager.findFragmentByTag("load more")).commit();
    }

    public static void refresh(int eMailMessagesLayout) {
        View mainMenuLoadingLayout = activityCurrent.findViewById(activityCurrentFragmentLoadingLayoutId);
        mainMenuLoadingLayout.bringToFront();
        Fragment fragmentLoadingCurrent = new LoadingProgressBarCircle();
        activityCurrent.getSupportFragmentManager().beginTransaction()
                .add(activityCurrentFragmentLoadingLayoutId, fragmentLoadingCurrent)
                .commit();
        if (modeMainMenuDeleting)
            setModeMainMenuDeleting(false);
        removeEMailMessagesLayoutViews();
        executor.execute((Runnable) () -> {
            loadMessages(0);
            activityCurrent.runOnUiThread((Runnable) () -> {
                display(eMailMessagesLayout);
                LoadMore loadMore = new LoadMore();
                activityCurrent.getSupportFragmentManager().beginTransaction()
                        .add(eMailMessagesLayout, loadMore)
                        .remove(fragmentLoadingCurrent)
                        .commit();
                TextView refresh = activityCurrent.getSupportFragmentManager().findFragmentByTag("main menu show more")
                        .getView()
                        .findViewById(R.id.main_menu_show_more_refresh);
                refresh.setClickable(true);
            });
        });
    }

    public static void returnDisplayedMessages(int eMailMessagesLayoutId) {
        FragmentManager activityCurrentFragmentManager=activityCurrent.getSupportFragmentManager();
        FragmentTransaction activityCurrentFragmentTransaction=activityCurrentFragmentManager.beginTransaction();
        for (EMailMessage eMailMessage:eMailMessagesLoadedCurrent) {
            activityCurrentFragmentTransaction.add(eMailMessagesLayoutId, eMailMessage, String.valueOf(displayedEMailMessagesCount));
            displayedEMailMessagesCount++;
        }
        activityCurrentFragmentTransaction.add(eMailMessagesLayoutId, new LoadMore(), "load more").commit();
        eMailMessagesLoadedCurrent.clear();
    }


    private static EMailMessage loadMessage(Message message) {
        try {
            Address[] messageFromAddresses = message.getFrom();
            int fromAddressesAmount = messageFromAddresses.length;
            String[] from = new String[fromAddressesAmount];
            for (int fromAddressCount = 0; fromAddressCount < messageFromAddresses.length; fromAddressCount++) {
                from[fromAddressCount] = messageFromAddresses[fromAddressCount].toString();
            }
            String subject = message.getSubject();
            String sentDate = formatSentDate(message.getSentDate());
            EMailMessage eMailMessage=new EMailMessage(message, from, subject, sentDate);
            return eMailMessage;
        } catch (Exception e) {
            return null;
        }
    }

    public static void loadEMailMessageContent() {
        Fragment fragmentLoadingCurrent = new LoadingProgressBarCircle();
        activityCurrent.getSupportFragmentManager().beginTransaction()
                .add(activityCurrentFragmentLoadingLayoutId, fragmentLoadingCurrent)
                .commit();
        executor.execute(new Runnable() {
            final HashMap<String, Object> eMailMessageContentTypeAndContent=new HashMap<>();
            public void run() {
                try {
                    Part eMailMessageContent = eMailMessageCurrent.message;
                    if (eMailMessageContent.isMimeType("multipart/*")) {
                        Multipart eMailMessageContentMultipart=(Multipart) eMailMessageContent.getContent();
                        int eMailMessageContentPartAmount=eMailMessageContentMultipart.getCount();
                        for (int i=0; i<eMailMessageContentPartAmount; i++) {
                            Part eMailMessageContentPart=eMailMessageContentMultipart.getBodyPart(i);
                            HashMap<String, Object> partContentTypeAndContent=loadEMailMessageContent(eMailMessageContentPart);
                            eMailMessageContentTypeAndContent.putAll(partContentTypeAndContent);
                        }
                    } else {
                        HashMap<String, Object> messageContentTypeAndContent = loadEMailMessageContent(eMailMessageContent);
                        eMailMessageContentTypeAndContent.putAll(messageContentTypeAndContent);
                    }
                    activityCurrent.runOnUiThread((Runnable) () -> {
                        LinearLayout currentEMailMessageContentLayout= activityCurrent.findViewById(R.id.email_message_open_content_layout);
                        Iterator<Map.Entry<String, Object>> eMailMessageContentTypeAndContentIterator=eMailMessageContentTypeAndContent.entrySet().iterator();
                        while (eMailMessageContentTypeAndContentIterator.hasNext()) {
                            Map.Entry<String,Object> contentTypeAndContent=eMailMessageContentTypeAndContentIterator.next();
                            String contentType=contentTypeAndContent.getKey();
                            Object content=contentTypeAndContent.getValue();
                            if (contentType.equals("text/plain") && !eMailMessageCurrentHasContentHtml) {
                                TextView contentText=new TextView(activityCurrent);
                                contentText.setText((String) content);
                                contentText.setTextSize(20);
                                int black= activityCurrent.getColor(R.color.black);
                                contentText.setTextColor(black);
                                currentEMailMessageContentLayout.addView(contentText);
                            } else if (contentType.equals("text/html")) {
                                WebView contentWeb=new WebView(activityCurrent);
                                contentWeb.setWebViewClient(new WebViewClient() {

                                    public boolean shouldOverrideUrlLoading(WebView webView, WebResourceRequest request) {
                                        if (request!=null) {
                                            String currentUrlString = request.getUrl().toString();
                                            Uri currentUri = Uri.parse(currentUrlString);
                                            Intent intent = new Intent(Intent.ACTION_VIEW, currentUri);
                                            Intent intentChooser=Intent.createChooser(intent, "Select an app");
                                            activityCurrent.startActivity(intentChooser);
                                            return true;
                                        } else
                                            return false;
                                    }

                                    public WebResourceResponse shouldInterceptRequest(WebView webView, WebResourceRequest request) {
                                        try {
                                            String currentUrlString = request.getUrl().toString();
                                            if (currentUrlString.startsWith("http")) {
                                                String correctUrlString = currentUrlString.replace("http", "https");
                                                URL correctUrl = new URL(correctUrlString);
                                                URLConnection correctUrlConnection = correctUrl.openConnection();
                                                String correctUrlContentType = correctUrlConnection.getContentType();
                                                String correctUrlContentEncoding = correctUrlConnection.getContentEncoding();
                                                InputStream correctUrlContentInputStream = correctUrlConnection.getInputStream();
                                                WebResourceResponse correctWebResourceResponse = new WebResourceResponse(correctUrlContentType,
                                                        correctUrlContentEncoding,
                                                        correctUrlContentInputStream);
                                                return correctWebResourceResponse;
                                            } else
                                                return super.shouldInterceptRequest(webView, request);
                                        } catch (Exception e) {
                                            return null;
                                        }
                                    }
                                });
                                WebSettings contentWebSettings=contentWeb.getSettings();
                                contentWebSettings.setBuiltInZoomControls(true);
                                contentWebSettings.setDisplayZoomControls(true);
                                contentWebSettings.setSupportZoom(true);
                                contentWebSettings.setJavaScriptEnabled(true);
                                contentWeb.loadData((String) content, "text/html", "base64");
                                currentEMailMessageContentLayout.addView(contentWeb);
                            } else if (contentType.equals("image/*")) {
                                ImageView contentImage = new ImageView(activityCurrent);
                                contentImage.setImageBitmap((Bitmap) content);
                                currentEMailMessageContentLayout.addView(contentImage);
                            } else if (contentType.equals("unknown")) {
                                TextView unknownContentType=new TextView(activityCurrent);
                                unknownContentType.setText(R.string.unknown_content_type);
                                unknownContentType.setTextSize(20);
                                int blue= activityCurrent.getColor(R.color.main_color);
                                unknownContentType.setTextColor(blue);
                                currentEMailMessageContentLayout.addView(unknownContentType);
                            }
                            activityCurrent.getSupportFragmentManager().beginTransaction()
                                    .remove(fragmentLoadingCurrent)
                                    .commit();
                        }
                    });
                } catch (Exception e) {

                }
            }
        });
    }

    private static HashMap<String, Object> loadEMailMessageContent(Part eMailMessageContentPart) throws Exception {
        if (eMailMessageContentPart.isMimeType("text/plain")) {
            HashMap<String, Object> partContentTypeAndContent = new HashMap<>();
            Object content = eMailMessageContentPart.getContent();
            partContentTypeAndContent.put("text/plain", content);
            return partContentTypeAndContent;
        } else if (eMailMessageContentPart.isMimeType("text/html")) {
            HashMap<String, Object> partContentTypeAndContent = new HashMap<>();
            String htmlString = (String) eMailMessageContentPart.getContent();
            Object content = Base64.encodeToString(htmlString.getBytes(), Base64.DEFAULT);
            partContentTypeAndContent.put("text/html", content);
            eMailMessageCurrentHasContentHtml =true;
            return partContentTypeAndContent;
        } else if (eMailMessageContentPart.isMimeType("image/*")) {
            HashMap<String, Object> partContentTypeAndContent = new HashMap<>();
            InputStream contentStream = eMailMessageContentPart.getInputStream();
            Object content = BitmapFactory.decodeStream(new BufferedInputStream(contentStream));
            partContentTypeAndContent.put("image/*", content);
            return partContentTypeAndContent;
        } else if (eMailMessageContentPart.isMimeType("multipart/*")) {
            Multipart eMailMessageContentMultipart=(Multipart) eMailMessageContentPart.getContent();
            int eMailMessageContentPartAmount=eMailMessageContentMultipart.getCount();
            HashMap<String, Object> partContentTypeAndContent=new HashMap<>();
            for (int i=0; i<eMailMessageContentPartAmount; i++) {
                Part contentPart=eMailMessageContentMultipart.getBodyPart(i);
                partContentTypeAndContent.putAll(loadEMailMessageContent(contentPart));
            }
            return partContentTypeAndContent;
        } else if (eMailMessageContentPart.isMimeType("message/rfc822")) {
            HashMap<String, Object> partContentTypeAndContent=new HashMap<>();
            Part nestedMessageContent = (Part) eMailMessageContentPart.getContent();
            partContentTypeAndContent.putAll(loadEMailMessageContent(nestedMessageContent));
            return partContentTypeAndContent;
        }
        HashMap<String, Object> partContentTypeAndContent = new HashMap<>();
        partContentTypeAndContent.put("unknown", null);
        return partContentTypeAndContent;
    }

    public static void disconnectFromNetwork() {
        executor.execute((Runnable) () -> {
            try {
                hasLogOut=false;
                hasDisplayedMessages=false;
                displayedEMailMessagesCount=0;
                currentMainMenuScrollY=0;
                eMailMessagesLoadedCurrent.clear();
                if (modeMainMenuDeleting)
                    modeMainMenuDeleting =false;
                activityCurrent.runOnUiThread((Runnable) () -> {
                    Intent intent=new Intent(activityCurrent, MenuSignIn.class);
                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
                    activityCurrent.startActivity(intent);
                });
            } catch (Exception e) {

            }
        });
    }

    public static void saveDisplayedEMailMessages() {
        eMailMessagesLoadedCurrent.addAll(getDisplayedEMailMessages());
        displayedEMailMessagesCount=0;
    }

    public static void setEMailMessageCurrent(EMailMessage eMailMessage) {
        eMailMessageCurrent = eMailMessage;
    }

    public static EMailMessage getEMailMessageCurrent() {
        return eMailMessageCurrent;
    }

    public static String formatSentDate(Date date) {
        SimpleDateFormat sentDateFormat = new SimpleDateFormat("MMM, dd hh:mm");
        String sentDate = sentDateFormat.format(date);
        return sentDate;
    }

    public static int getCurrentMainMenuScrollY() {
        return currentMainMenuScrollY;
    }

    public static void setCurrentMainMenuScrollY(int mainMenuScrollY) {
        currentMainMenuScrollY=mainMenuScrollY;
    }

    public void onAnimationStart(Animator animator) {

    }

    public void onAnimationRepeat(Animator animator) {

    }

    public void onAnimationEnd(Animator animator) {

    }

    public void onAnimationCancel(Animator animator) {

    }

    public void onAnimationUpdate(ValueAnimator animator) {

    }


    public void onAnimationStart(Animation animation) {

    }

    public void onAnimationRepeat(Animation animation) {

    }

    public void onAnimationEnd(Animation animation) {

    }

    public void onClick(View view) {

    }

    public boolean onLongClick(View view) {
        return false;
    }

    public void onFocusChange(View view, boolean hasFocus) {

    }

    public void beforeTextChanged(CharSequence content, int start, int count, int after) {

    }

    public void onTextChanged(CharSequence content, int start, int count, int after) {

    }

    public void afterTextChanged(Editable content) {

    }

    public void onChildViewAdded(View parent, View child) {

    }

    public void onChildViewRemoved(View parent, View view) {

    }

    @Override
    public void onGlobalLayout() {

    }

    public boolean onTouch(View view, MotionEvent event) {
        return false;
    }

    public void onScrollChanged() {

    }

}
