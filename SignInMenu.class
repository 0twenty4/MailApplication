import android.animation.ValueAnimator;
import android.content.res.ColorStateList;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.text.method.PasswordTransformationMethod;
import android.text.method.SingleLineTransformationMethod;
import android.widget.Button;
import android.widget.EditText;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TextView;

import static android.view.View.INVISIBLE;
import static android.view.View.VISIBLE;


public class SignInMenu extends AppCompatActivity {
    private static boolean loginCorrectOrWrong = false;
    private static boolean loginCorrect = false;
    private static boolean passwordCorrectOrWrong = false;
    private static boolean passwordCorrect = false;
    private static boolean buttonSignInAvailable = false;

    public void onCreate(Bundle savedInstanceState) {
        System.out.println(savedInstanceState);
        boolean hasLogOut=EMailService.hasLogOut();
        if (hasLogOut)
            overridePendingTransition(R.anim.slide_from_left_to_middle, R.anim.slide_from_middle_to_right);
        super.onCreate(savedInstanceState);
        EMailService.setCurrentActivity(this, R.id.sign_in_menu);
        setContentView(R.layout.sign_in_menu);
        int green = getColor(R.color.green);
        int red = getColor(R.color.red);
        int blue = getColor(R.color.main_color);
        int grey = getColor(R.color.grey);
        PasswordTransformationMethod formatPassword = PasswordTransformationMethod.getInstance();
        SingleLineTransformationMethod formatText = SingleLineTransformationMethod.getInstance();
        EditText login = findViewById(R.id.login);
        EditText password = findViewById(R.id.password);
        login.setText("stringlovejs@gmail.com");
        password.setText("12danilporsinv20042511");
        password.setTransformationMethod(formatPassword);
        Button buttonSignIn = findViewById(R.id.sign_in_button);
        FrameLayout passwordVisibility = findViewById(R.id.password_visibility);
        ImageView imagePasswordVisible = new ImageView(this);
        imagePasswordVisible.setVisibility(VISIBLE);
        imagePasswordVisible.setImageDrawable(getDrawable(R.drawable.password_visible));
        imagePasswordVisible.setColorFilter(blue);
        passwordVisibility.addView(imagePasswordVisible);
        ImageView imagePasswordInvisible = new ImageView(this);
        imagePasswordInvisible.setVisibility(INVISIBLE);
        imagePasswordInvisible.setImageDrawable(getDrawable(R.drawable.password_invisible));
        imagePasswordInvisible.setColorFilter(blue);
        passwordVisibility.addView(imagePasswordInvisible);
        TextView accountNotExist = findViewById(R.id.account_not_exist);
        ValueAnimator animatorMatchingLogin = ValueAnimator.ofArgb(blue, green).setDuration(300);
        animatorMatchingLogin.addUpdateListener(new EMailService() {
            public void onAnimationUpdate(ValueAnimator animator) {
                login.setBackgroundTintList(ColorStateList.valueOf((int) animator.getAnimatedValue()));
            }
        });
        ValueAnimator animatorNotMatchingLogin = ValueAnimator.ofArgb(blue, red).setDuration(300);
        animatorNotMatchingLogin.addUpdateListener(new EMailService() {
            public void onAnimationUpdate(ValueAnimator animator) {
                login.setBackgroundTintList(ColorStateList.valueOf((int) animator.getAnimatedValue()));
            }
        });
        ValueAnimator animatorMatchingPassword = ValueAnimator.ofArgb(blue, green).setDuration(300);
        animatorMatchingPassword.addUpdateListener(new EMailService() {
            public void onAnimationUpdate(ValueAnimator animator) {
                password.setBackgroundTintList(ColorStateList.valueOf((int) animator.getAnimatedValue()));
            }
        });
        ValueAnimator animatorNotMatchingPassword = ValueAnimator.ofArgb(blue, red).setDuration(300);
        animatorNotMatchingPassword.addUpdateListener(new EMailService() {
            public void onAnimationUpdate(ValueAnimator animator) {
                password.setBackgroundTintList(ColorStateList.valueOf((int) animator.getAnimatedValue()));
            }
        });
        login.setOnFocusChangeListener(new EMailService() {

            public void onFocusChange(View view, boolean hasFocus) {
                if (hasFocus) {
                    if (buttonSignInAvailable) {
                        buttonSignInAvailable = false;
                        buttonSignIn.setBackgroundTintList(ColorStateList.valueOf(grey));
                    }
                    if (loginCorrectOrWrong)
                        login.setBackgroundTintList(ColorStateList.valueOf(blue));
                    if (accountNotExist.getVisibility() == VISIBLE)
                        accountNotExist.setVisibility(INVISIBLE);
                }
                if (!hasFocus) {
                    if (!EMailService.loginEmpty(login)) {
                        loginCorrectOrWrong = true;
                        if (EMailService.loginCorrect(login)) {
                            loginCorrect = true;
                            animatorMatchingLogin.start();
                            if (passwordCorrect) {
                                buttonSignInAvailable = true;
                                buttonSignIn.setBackgroundTintList(ColorStateList.valueOf(blue));
                            }
                        } else {
                            loginCorrect = false;
                            animatorNotMatchingLogin.start();
                            if (buttonSignInAvailable) {
                                buttonSignInAvailable = false;
                                buttonSignIn.setBackgroundTintList(ColorStateList.valueOf(grey));
                            }
                        }
                    } else {
                        loginCorrectOrWrong = false;
                        loginCorrect = false;
                    }
                }
            }
        });
        password.setOnFocusChangeListener(new EMailService() {
            public void onFocusChange(View view, boolean hasFocus) {
                if (hasFocus) {
                    if (buttonSignInAvailable) {
                        buttonSignInAvailable = false;
                        buttonSignIn.setBackgroundTintList(ColorStateList.valueOf(grey));
                    }
                    if (passwordCorrectOrWrong)
                        password.setBackgroundTintList(ColorStateList.valueOf(blue));
                    if (accountNotExist.getVisibility() == VISIBLE)
                        accountNotExist.setVisibility(INVISIBLE);
                }
                if (!hasFocus) {
                    if (!EMailService.passwordEmpty(password)) {
                        passwordCorrectOrWrong = true;
                        if (EMailService.passwordCorrect(password)) {
                            passwordCorrect = true;
                            animatorMatchingPassword.start();
                            if (loginCorrect) {
                                buttonSignInAvailable = true;
                                buttonSignIn.setBackgroundTintList(ColorStateList.valueOf(blue));
                            }
                        } else {
                            passwordCorrect = false;
                            animatorNotMatchingPassword.start();
                            if (buttonSignInAvailable) {
                                buttonSignInAvailable = false;
                                buttonSignIn.setBackgroundTintList(ColorStateList.valueOf(grey));
                            }
                        }
                    } else {
                        passwordCorrect = false;
                        passwordCorrectOrWrong = false;
                    }
                }
            }
        });
        buttonSignIn.setOnClickListener(new EMailService() {
            public void onClick(View view) {
                if (!(SignInMenu.loginCorrect && SignInMenu.passwordCorrect)) {
                    if (!SignInMenu.loginCorrectOrWrong && !SignInMenu.passwordCorrectOrWrong) {
                        SignInMenu.loginCorrectOrWrong = true;
                        animatorNotMatchingLogin.start();
                        SignInMenu.passwordCorrectOrWrong = true;
                        animatorNotMatchingPassword.start();
                    } else if (SignInMenu.loginCorrectOrWrong && !SignInMenu.passwordCorrectOrWrong) {
                        SignInMenu.passwordCorrectOrWrong = true;
                        animatorNotMatchingPassword.start();
                    } else if (!SignInMenu.loginCorrectOrWrong && SignInMenu.passwordCorrectOrWrong) {
                        SignInMenu.loginCorrectOrWrong = true;
                        animatorNotMatchingLogin.start();
                    }
                } else {
                    String userLogin=login.getText().toString();
                    String userPassword=password.getText().toString();
                    EMailService.loadUser(userLogin, userPassword);
                    EMailService.connectToNetwork();
                }
            }
        });
        passwordVisibility.setOnClickListener(new EMailService() {
            boolean passwordInvisible = true;

            public void onClick(View view) {
                if (passwordInvisible) {
                    password.setTransformationMethod(formatText);
                    imagePasswordVisible.setVisibility(INVISIBLE);
                    imagePasswordInvisible.setVisibility(VISIBLE);
                    passwordInvisible = false;
                } else {
                    password.setTransformationMethod(formatPassword);
                    imagePasswordInvisible.setVisibility(INVISIBLE);
                    imagePasswordVisible.setVisibility(VISIBLE);
                    passwordInvisible = true;
                }
            }
        });
    }
}
