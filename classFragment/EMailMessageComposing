package com.example.mailapplication;

import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;

public class EMailMessageComposing extends AppCompatActivity {

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.email_message_composing);
        ImageView eMailMessageComposingBack = findViewById(R.id.email_message_composing_back);
        eMailMessageComposingBack.setOnClickListener(new EMailService() {
            public void onClick(View view) {
                Intent intent = new Intent(EMailMessageComposing.this, MainMenu.class);
                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
                startActivity(intent);
            }
        });
        EditText eMailMessageComposingFrom = findViewById(R.id.email_message_composing_from);
        eMailMessageComposingFrom.setOnFocusChangeListener(new EMailService() {
            final FrameLayout eMailMessageComposingEMailAddressFromCorrectLayout = findViewById(R.id.email_message_composing_email_address_from_correct_layout);
            final String eMailMessageComposingFromTextOrigin = getString(R.string.from);

            public void onFocusChange(View view, boolean hasFocus) {
                if (hasFocus) {
                    boolean eMailMessageComposingEMailAddressFromChecked = eMailMessageComposingEMailAddressFromCorrectLayout.getChildCount() > 0;
                    if (eMailMessageComposingEMailAddressFromChecked)
                        eMailMessageComposingEMailAddressFromCorrectLayout.removeAllViews();
                    else {
                        String eMailMessageComposingFromTextCurrent = eMailMessageComposingFrom.getText().toString();
                        if (eMailMessageComposingFromTextCurrent.equals(eMailMessageComposingFromTextOrigin))
                            eMailMessageComposingFrom.setText("");
                    }
                } else {
                    if (!EMailService.fieldEmpty(eMailMessageComposingFrom)) {
                        if (EMailService.eMailAddressCorrect(eMailMessageComposingFrom)) {
                            ImageView eMailAddressCorrect = new ImageView(EMailMessageComposing.this);
                            eMailAddressCorrect.setImageResource(R.drawable.email_address_correct);
                            eMailMessageComposingEMailAddressFromCorrectLayout.addView(eMailAddressCorrect);
                        } else {
                            ImageView eMailAddressNotCorrect = new ImageView(EMailMessageComposing.this);
                            eMailAddressNotCorrect.setImageResource(R.drawable.email_address_not_correct);
                            eMailMessageComposingEMailAddressFromCorrectLayout.addView(eMailAddressNotCorrect);
                        }
                    } else {
                        eMailMessageComposingFrom.setText(eMailMessageComposingFromTextOrigin);
                    }
                }
            }
        });
        EditText eMailMessageComposingTo = findViewById(R.id.email_message_composing_to);
        eMailMessageComposingTo.setOnFocusChangeListener(new EMailService() {
            final FrameLayout eMailMessageComposingEMailAddressToCorrectLayout = findViewById(R.id.email_message_composing_email_address_to_correct_layout);
            final String eMailMessageComposingToTextOrigin = getString(R.string.to);

            public void onFocusChange(View view, boolean hasFocus) {
                if (hasFocus) {
                    boolean eMailMessageComposingEMailAddressToChecked = eMailMessageComposingEMailAddressToCorrectLayout.getChildCount() > 0;
                    if (eMailMessageComposingEMailAddressToChecked)
                        eMailMessageComposingEMailAddressToCorrectLayout.removeAllViews();
                    else {
                        String eMailMessageComposingToTextCurrent = eMailMessageComposingTo.getText().toString();
                        if (eMailMessageComposingToTextCurrent.equals(eMailMessageComposingToTextOrigin)) {
                            eMailMessageComposingTo.setText("");
                        }
                    }
                } else {
                    if (!EMailService.fieldEmpty(eMailMessageComposingTo)) {
                        if (EMailService.eMailAddressCorrect(eMailMessageComposingTo)) {
                            ImageView eMailAddressCorrect = new ImageView(EMailMessageComposing.this);
                            eMailAddressCorrect.setImageResource(R.drawable.email_address_correct);
                            eMailMessageComposingEMailAddressToCorrectLayout.addView(eMailAddressCorrect);
                        } else {
                            ImageView eMailAddressNotCorrect = new ImageView(EMailMessageComposing.this);
                            eMailAddressNotCorrect.setImageResource(R.drawable.email_address_not_correct);
                            eMailMessageComposingEMailAddressToCorrectLayout.addView(eMailAddressNotCorrect);
                        }
                    } else
                        eMailMessageComposingTo.setText(eMailMessageComposingToTextOrigin);
                }
            }
        });
        EMailService eMailMessageComposingSubjectAndComposeMessageFocusChangeListener = new EMailService() {
            public void onFocusChange(View view, boolean hasFocus) {
                final EditText viewEditText = (EditText) view;
                final int viewEditTextId = viewEditText.getId();
                final String viewEditTextTextOrigin;
                if (viewEditTextId == R.id.email_message_composing_subject)
                    viewEditTextTextOrigin = getString(R.string.subject);
                else
                    viewEditTextTextOrigin = getString(R.string.compose_message);
                if (hasFocus) {
                    String viewEditTextTextCurrent = viewEditText.getText().toString();
                    if (viewEditTextTextCurrent.equals(viewEditTextTextOrigin))
                        viewEditText.setText("");
                } else {
                    if (EMailService.fieldEmpty(viewEditText))
                        viewEditText.setText(viewEditTextTextOrigin);
                }
            }
        };
        EditText eMailMessageComposingSubject=findViewById(R.id.email_message_composing_subject);
        eMailMessageComposingSubject.setOnFocusChangeListener(eMailMessageComposingSubjectAndComposeMessageFocusChangeListener);
        EditText eMailMessageComposingComposeMessage=findViewById(R.id.email_message_composing_compose_message);
        eMailMessageComposingComposeMessage.setOnFocusChangeListener(eMailMessageComposingSubjectAndComposeMessageFocusChangeListener);
    }

    public void onBackPressed() {
        Intent intent=new Intent(this, MainMenu.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
    }
}
