package com.example.mailapplication;

import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.res.ColorStateList;

import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;

import android.database.Cursor;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.IBinder;
import android.provider.MediaStore;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.view.ViewGroup;
import android.view.LayoutInflater;
import android.widget.TextView;

import static android.view.View.VISIBLE;
import static android.view.View.GONE;

import java.util.ArrayList;


public class EMailMessageComposing extends AppCompatActivity {
    LinearLayout toLayout;
    EditText toLayoutOrigin;
    ToLayoutEnter toLayoutEnter;
    View contentLayoutClickable;
    View shadow;
    View top;
    View popUpWindowLayout;
    ColorStateList transparent;
    ArrayList<LayoutPart> toLayoutParts = new ArrayList<>();
    int toLayoutPartEditCount;
    boolean modeEditLayoutPartOn;
    EMailService toLayoutTextChangedListener;
    InputMethodManager keyboard;
    boolean keyboardShown;
    FragmentManager fragmentManager;
    ArrayList<Attachment> attachments=new ArrayList<>();
    ActivityResultLauncher<String> resultLauncher;
    IBinder windowToken;
    final String typeDocument="application/*";
    final String typeImage="image/*";
    final String typeAudio="audio/*";
    boolean hasAttachments;
    EnteringFileName enteringFileName;


    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.email_message_composing);
        View fragmentLoadingLayout=findViewById(R.id.email_message_composing_fragment_loading_layout);
        fragmentLoadingLayout.setVisibility(GONE);
        EMailService.setCurrentActivity(this, R.id.email_message_composing_fragment_loading_layout);
        windowToken=getWindow().getDecorView().getWindowToken();
        FrameLayout fromLayout = findViewById(R.id.email_message_composing_from_layout);
        String currentUserEMailAddress = EMailService.getCurrentUserEMailAddress();
        LayoutPart fromLayoutPart = new LayoutPart();
        fromLayoutPart.setLayoutPartData(currentUserEMailAddress, true, true);
        int fromLayoutId = fromLayout.getId();
        getSupportFragmentManager().beginTransaction()
                .add(fromLayoutId, fromLayoutPart)
                .commit();
        toLayout = findViewById(R.id.email_message_composing_to_layout);
        toLayoutTextChangedListener = new EMailService() {
            public void onTextChanged(CharSequence text, int start, int count, int after) {
                final int charactersCount = text.length();
                if (charactersCount > 0) {
                    char characterLast = text.charAt(charactersCount - 1);
                    if (characterLast == ' ') {
                        if (charactersCount != 1) {
                            if (modeEditLayoutPartOn) {
                                toLayoutEnter.getView().setAlpha(0);
                                finishLastLayoutPartEdit(true);
                                toLayout.addView(toLayoutOrigin, 0);
                                toLayoutOrigin.requestFocus();
                                modeEditLayoutPartOn = false;
                            } else {
                                String eMailAddress=toLayoutOrigin.getText().toString();
                                addToLayoutPart(getEMailAddressWithNoSpace(eMailAddress), toLayout.getChildCount());
                            }
                        }
                        toLayoutOrigin.setText("");
                    }
                }
            }
        };
        toLayoutOrigin = findViewById(R.id.email_message_composing_to_origin);
        transparent = ColorStateList.valueOf(getColor(R.color.transparent));
        toLayoutOrigin.setBackgroundTintList(transparent);
        toLayoutOrigin.addTextChangedListener(toLayoutTextChangedListener);
        EditText subject = findViewById(R.id.email_message_composing_subject);
        subject.setFocusable(false);
        EditText content = findViewById(R.id.email_message_composing_content);
        content.setFocusable(false);
        ImageView back = findViewById(R.id.email_message_composing_back);
        ImageView attachmentIcon = findViewById(R.id.email_message_composing_attachment_icon);
        ImageView send = findViewById(R.id.email_message_composing_send);
        View toLayoutClickable = findViewById(R.id.email_message_composing_to_layout_clickable);
        View contentLayoutClickableAll = findViewById(R.id.email_message_composing_content_layout_clickable_all);
        contentLayoutClickableAll.bringToFront();
        contentLayoutClickable =contentLayoutClickableAll;
        FrameLayout attachmentMenuLayout=findViewById(R.id.email_message_composing_attachment_menu_layout);
        attachmentMenuLayout.bringToFront();
        Drawable attachmentMenuBackground= ContextCompat.getDrawable(this, R.drawable.background_email_message_composing_attachment_menu);
        top=findViewById(R.id.email_message_composing_top);
        AttachmentMenu attachmentMenu=new AttachmentMenu(this, attachmentMenuLayout, attachmentMenuBackground, top);
        popUpWindowLayout=findViewById(R.id.email_message_composing_pop_up_window_layout);
        popUpWindowLayout.setVisibility(GONE);
        final int popUpWindowLayoutId=popUpWindowLayout.getId();
        keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
        fragmentManager = getSupportFragmentManager();
        EMailService eMailMessageComposingClickListener = new EMailService() {
            final int backId = back.getId();
            final int attachmentIconId = attachmentIcon.getId();
            final int sendId = send.getId();
            final int toLayoutClickableId = toLayoutClickable.getId();
            final ConfirmingSendingEmptyMessage confirmingSendingEmptyMessage=new ConfirmingSendingEmptyMessage(EMailMessageComposing.this);
            EMailService confirmingSendingEmptyMessageClickListener;
            boolean attachmentMenuShown;

            public void onClick(View view) {
                final int viewId = view.getId();
                if (viewId == backId)
                    onBackPressed();
                else if (viewId == attachmentIconId) {
                    if (!attachmentMenuShown) {
                        attachmentMenuShown=true;
                        fragmentManager.beginTransaction()
                                .add(attachmentMenuLayout.getId(), attachmentMenu)
                                .commit();
                    } else {
                        attachmentMenuShown=false;
                        fragmentManager.beginTransaction()
                                .remove(attachmentMenu)
                                .commit();
                    }
                } else {
                    final int contentLayoutClickableId = contentLayoutClickable.getId();
                    final View currentFocus = getCurrentFocus();
                    if (currentFocus!=null)
                        currentFocus.clearFocus();
                    if (viewId == sendId) {
                        keyboardShown=true;
                        onBackPressed();
                        if (content.getText().toString().isEmpty()) {
                            popUpWindowLayout.setVisibility(VISIBLE);
                            fragmentManager.beginTransaction()
                                    .add(popUpWindowLayoutId, confirmingSendingEmptyMessage)
                                    .runOnCommit((Runnable) () -> {
                                        if (confirmingSendingEmptyMessageClickListener == null) {
                                            confirmingSendingEmptyMessageClickListener = new EMailService() {
                                                final int yesId = confirmingSendingEmptyMessage.yes.getId();

                                                public void onClick(View view) {
                                                    final int viewId = view.getId();
                                                    fragmentManager.beginTransaction()
                                                            .remove(confirmingSendingEmptyMessage)
                                                            .commit();
                                                    if (viewId == yesId)
                                                        EMailService.sendEMailMessage(toLayoutParts, subject, content, attachments);
                                                }
                                            };
                                        }
                                        confirmingSendingEmptyMessage.yes.setOnClickListener(confirmingSendingEmptyMessageClickListener);
                                        confirmingSendingEmptyMessage.no.setOnClickListener(confirmingSendingEmptyMessageClickListener);
                                        keyboard.hideSoftInputFromWindow(windowToken, 0);
                                    })
                                    .commit();
                        } else
                            EMailService.sendEMailMessage(toLayoutParts, subject, content, attachments);
                    } else {
                        final View viewToShowKeyboard;
                        if (viewId == toLayoutClickableId) {
                            toLayoutOrigin.setFocusableInTouchMode(true);
                            toLayoutOrigin.setFocusable(true);
                            subject.setFocusable(false);
                            content.setFocusable(false);
                            toLayout.addView(toLayoutOrigin, 0);
                            toLayoutOrigin.requestFocus();
                            toLayoutClickable.setVisibility(GONE);
                            viewToShowKeyboard = toLayoutOrigin;
                        } else {
                                toLayout.removeView(toLayoutOrigin);
                                if (viewId == contentLayoutClickableId) {
                                    System.out.println("hello");
                                    toLayoutOrigin.setFocusable(false);
                                    subject.setFocusable(false);
                                    content.setFocusableInTouchMode(true);
                                    content.setFocusable(true);
                                    content.requestFocus();
                                    viewToShowKeyboard = content;
                                } else {
                                    toLayoutOrigin.setFocusable(false);
                                    content.setFocusable(false);
                                    subject.setFocusableInTouchMode(true);
                                    subject.setFocusable(true);
                                    subject.requestFocus();
                                    viewToShowKeyboard = subject;
                                }
                                if (modeEditLayoutPartOn) {
                                    modeEditLayoutPartOn = false;
                                    if (!toLayoutEnter.enter.getText().toString().isEmpty())
                                        finishLastLayoutPartEdit(false);
                                    else
                                        toLayout.removeViewAt(toLayoutPartEditCount);
                                } else {
                                    final String toLayoutOriginText = toLayoutOrigin.getText().toString();
                                    if (!toLayoutOriginText.isEmpty())
                                        addToLayoutPart(toLayoutOriginText, toLayout.getChildCount());
                                }
                                toLayoutOrigin.setText("");
                                toLayoutClickable.setVisibility(VISIBLE);
                                toLayoutClickable.bringToFront();
                            }
                            keyboard.showSoftInput(viewToShowKeyboard,0);
                    }
                }
            }
        };
        back.setOnClickListener(eMailMessageComposingClickListener);
        attachmentIcon.setOnClickListener(eMailMessageComposingClickListener);
        send.setOnClickListener(eMailMessageComposingClickListener);
        toLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        View subjectLayoutClickable = findViewById(R.id.email_message_composing_subject_layout_clickable);
        subjectLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        contentLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        toLayoutClickable.bringToFront();
        subjectLayoutClickable.bringToFront();
        LinearLayout attachmentImageLayout=findViewById(R.id.email_message_composing_attachment_image_layout);
        LinearLayout attachmentDocumentLayout=findViewById(R.id.email_message_composing_attachment_document_layout);
        LinearLayout attachmentAudioLayout=findViewById(R.id.email_message_composing_attachment_audio_layout);
        shadow=findViewById(R.id.email_message_composing_shadow);
        shadow.bringToFront();
        enteringFileName=new EnteringFileName(this, popUpWindowLayout);
        Drawable attachmentLayoutBackground=ContextCompat.getDrawable(this, R.drawable.background_attachment_layout);
        resultLauncher=registerForActivityResult(new ActivityResultContracts.GetContent(),
                new ActivityResultCallback<Uri>() {
                final ContentResolver contentResolver=getContentResolver();
                Cursor cursor;
                final Drawable imageIcon=ContextCompat.getDrawable(EMailMessageComposing.this, R.drawable.attachment_image);
                final Drawable documentIcon=ContextCompat.getDrawable(EMailMessageComposing.this, R.drawable.attachment_document);
                final Drawable audioIcon=ContextCompat.getDrawable(EMailMessageComposing.this, R.drawable.attachment_audio);
                final int popUpWindowLayoutId = popUpWindowLayout.getId();

                    public void onActivityResult(Uri uri) {
                        if (uri != null) {
                            keyboard.showSoftInput(content, 0);
                            cursor = contentResolver.query(uri, null, null, null, null);
                            cursor.moveToFirst();
                            String contentType = cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.MIME_TYPE));
                            final LinearLayout attachmentLayout;
                            final Drawable icon;
                            if (contentType.startsWith(typeImage.replace("*", ""))) {
                                attachmentLayout=attachmentImageLayout;
                                icon = imageIcon;
                            } else if (contentType.startsWith(typeDocument.replace("*", ""))) {
                                attachmentLayout = attachmentDocumentLayout;
                                icon = documentIcon;
                            } else {
                                attachmentLayout = attachmentAudioLayout;
                                icon = audioIcon;
                            }
                            final FrameLayout attachmentIconLayout = new FrameLayout(EMailMessageComposing.this);
                            attachmentIconLayout.setId(View.generateViewId());
                            final int attachmentIconLayoutId = attachmentIconLayout.getId();
                            final View attachmentLayoutParent = (View) attachmentLayout.getParent();
                            if (attachmentLayoutParent.getBackground() == null)
                                attachmentLayoutParent.setBackground(attachmentLayoutBackground);
                            attachmentLayout.addView(attachmentIconLayout);
                            Attachment attachment = new Attachment(icon);
                            enteringFileName.setAttachmentToEnterFileName(attachment);
                            View eMailMessageComposingCurrentFocus=getCurrentFocus();
                            if (eMailMessageComposingCurrentFocus!=null)
                                eMailMessageComposingCurrentFocus.clearFocus();
                            popUpWindowLayout.setVisibility(VISIBLE);
                            fragmentManager.beginTransaction()
                                    .add(attachmentIconLayoutId, attachment)
                                    .add(popUpWindowLayoutId, enteringFileName)
                                    .commit();
                            if (!hasAttachments) {
                                hasAttachments=true;
                                contentLayoutClickableAll.setVisibility(GONE);
                                contentLayoutClickable =findViewById(R.id.email_message_composing_content_layout_clickable_text);
                                System.out.println(contentLayoutClickable);
                                contentLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
                                contentLayoutClickable.bringToFront();
                            }
                            attachment.content=uri;
                            attachment.contentType=contentType;
                            attachments.add(attachment);
                        }
                    }
                });
    }

    public void deleteToLayoutPart(LayoutPart layoutPart) {
        View layoutPartFrame = (View) layoutPart.getView().getParent();
        toLayout.removeView(layoutPartFrame);
        toLayoutParts.remove(layoutPart);
    }

    public void setModeEditLayoutPartOn(LayoutPart toLayoutPart) {
        if (!modeEditLayoutPartOn) {
            modeEditLayoutPartOn = true;
            editLayoutPart(toLayoutPart);
            toLayout.removeView(toLayoutOrigin);
        } else {
            finishLastLayoutPartEdit(false);
            editLayoutPart(toLayoutPart);
        }
    }

    public void editLayoutPart(LayoutPart toLayoutPart) {
        toLayoutPartEditCount = toLayoutParts.indexOf(toLayoutPart);
        toLayoutEnter = new ToLayoutEnter(toLayoutTextChangedListener, toLayoutPart.eMailAddress);
        FrameLayout toLayoutPartFrame = (FrameLayout) toLayoutPart.getView().getParent();
        int toLayoutPartFrameId = toLayoutPartFrame.getId();
        toLayoutPart.getView().setAlpha(0);
        fragmentManager.beginTransaction()
                .replace(toLayoutPartFrameId, toLayoutEnter)
                .commit();
        toLayoutParts.remove(toLayoutPart);
    }

    public void finishLastLayoutPartEdit(boolean eMailAddressHasSpace) {
        final String eMailAddress;
        if (eMailAddressHasSpace)
            eMailAddress=getEMailAddressWithNoSpace(toLayoutEnter.enter.getText().toString());
        else
            eMailAddress=toLayoutEnter.enter.getText().toString();
        LayoutPart toLayoutPart = getLayoutPart(eMailAddress);
        int toLayoutPartFrameId = toLayout.getChildAt(toLayoutPartEditCount).getId();
        fragmentManager.beginTransaction()
                .replace(toLayoutPartFrameId, toLayoutPart)
                .commit();
    }

    public void addToLayoutPart(String eMailAddress, int count) {
        FrameLayout toLayoutPartFrame=new FrameLayout(this);
        toLayout.addView(toLayoutPartFrame, count);
        toLayoutPartFrame.setId(View.generateViewId());
        fragmentManager.beginTransaction()
                .add(toLayoutPartFrame.getId(), getLayoutPart(eMailAddress))
                .commit();
    }

    public LayoutPart getLayoutPart(String eMailAddress) {
        final LayoutPart toLayoutPart = new LayoutPart();
        if (EMailService.eMailAddressValid(eMailAddress))
            toLayoutPart.setLayoutPartData(eMailAddress, true, false);
        else
            toLayoutPart.setLayoutPartData(eMailAddress, false, false);
        if (modeEditLayoutPartOn)
            toLayoutParts.add(toLayoutPartEditCount, toLayoutPart);
        else
            toLayoutParts.add(toLayoutPart);
        return toLayoutPart;
    }

    public String getEMailAddressWithNoSpace(String eMailAddress) {
        String eMailAddressWithNoSpace=new StringBuilder(eMailAddress)
                .deleteCharAt(eMailAddress.length()-1)
                .toString();
        return eMailAddressWithNoSpace;
    }

    public void changeFileName(Attachment attachment) {
        enteringFileName.changingFileName=true;
        enteringFileName.attachmentToEnterFileName=attachment;
        popUpWindowLayout.setVisibility(VISIBLE);
        fragmentManager.beginTransaction()
                .add(enteringFileName.parent.getId(), enteringFileName)
                .commit();
    }


    public Animation createPopUpWindowAnimation(boolean enter) {
        final int animationId;
        if (enter)
            animationId = R.anim.fade_from_invisible_to_visible;
        else
            animationId = R.anim.fade_from_visible_to_invisible;
        final Animation animation = AnimationUtils.loadAnimation(this, animationId);
        animation.setAnimationListener(new EMailService() {
            public void onAnimationStart(Animation animation) {
                System.out.println("im here");
                final float alphaTo;
                if (enter) {
                    shadow.setVisibility(VISIBLE);
                    alphaTo = 1;
                } else
                    alphaTo = 0;
                shadow.animate()
                        .alpha(alphaTo)
                        .setDuration(150)
                        .start();
            }

            public void onAnimationEnd(Animation animation) {
                System.out.println("hello");
                if (!enter) {
                    shadow.setVisibility(GONE);
                }
            }
        });
        return animation;
    }

    public void onBackPressed() {
        if (keyboardShown) {
            keyboardShown = false;
            keyboard.hideSoftInputFromWindow(windowToken, 0);
        }
        else {
            if (modeEditLayoutPartOn) {
                String space = "space ";
                toLayoutTextChangedListener.onTextChanged(space, 0, 0, 0);
            } else {
                Intent intent = new Intent(this, MenuMain.class);
                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
                startActivity(intent);
            }
        }
    }

    public static class ToLayoutEnter extends Fragment {
        EMailService toLayoutTextChangedListener;
        boolean hasTextChangedListener;
        EditText enter;
        private String eMailAddress;

        public ToLayoutEnter(EMailService toLayoutTextChangedListener, String eMailAddress) {
            this.toLayoutTextChangedListener = toLayoutTextChangedListener;
            this.eMailAddress=eMailAddress;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.to_layout_enter, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            super.onStart();
            enter = view.findViewById(R.id.enter);
            enter.setText(eMailAddress);
            enter.requestFocus();
            ((EMailMessageComposing) EMailService.getActivityCurrent()).keyboard.showSoftInput(enter, 0);
            enter.addTextChangedListener(toLayoutTextChangedListener);
            hasTextChangedListener = true;

        }
    }

    public static class AttachmentMenu extends Fragment {
        EMailMessageComposing eMailMessageComposing;
        Drawable background;
        View eMailMessageTop;
        View parent;

        public AttachmentMenu(EMailMessageComposing eMailMessageComposing, View parent, Drawable background, View eMailMessageTop) {
            this.eMailMessageComposing = eMailMessageComposing;
            this.parent = parent;
            this.background = background;
            this.eMailMessageTop = eMailMessageTop;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_composing_attachment_menu, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            View document = view.findViewById(R.id.email_message_composing_attachment_menu_document_layout_clickable);
            View image = view.findViewById(R.id.email_message_composing_attachment_menu_image_layout_clickable);
            EMailService attachmentMenuClickListener = new EMailService() {
                final int documentId = document.getId();
                final int imageId = image.getId();

                public void onClick(View view) {
                    final int viewId = view.getId();
                    if (viewId == documentId)
                        eMailMessageComposing.resultLauncher.launch(eMailMessageComposing.typeDocument);
                    else if (viewId == imageId)
                        eMailMessageComposing.resultLauncher.launch(eMailMessageComposing.typeImage);
                    else
                        eMailMessageComposing.resultLauncher.launch(eMailMessageComposing.typeAudio);
                    final View eMailMessageComposingCurrentFocus = eMailMessageComposing.getCurrentFocus();
                    if (eMailMessageComposingCurrentFocus != null)
                        eMailMessageComposingCurrentFocus.clearFocus();
                    eMailMessageComposing.keyboard.hideSoftInputFromWindow(eMailMessageComposing.windowToken, 0);
                    eMailMessageComposing.fragmentManager.beginTransaction()
                            .remove(AttachmentMenu.this)
                            .commit();
                }
            };
            document.setOnClickListener(attachmentMenuClickListener);
            image.setOnClickListener(attachmentMenuClickListener);
            View audio = view.findViewById(R.id.email_message_composing_attachment_menu_audio_layout_clickable);
            audio.setOnClickListener(attachmentMenuClickListener);
        }

        public Animation onCreateAnimation(int anim, boolean enter, int animNext) {
            final int animationId;
            if (enter)
                animationId=R.anim.slide_top_bottom_fade_invisible_visible;
            else
                animationId=R.anim.slide_bottom_top_fade_visible_invisible;
            final EMailMessageComposing eMailMessageComposing=(EMailMessageComposing) EMailService.getActivityCurrent();
            final Animation animation= AnimationUtils.loadAnimation(eMailMessageComposing, animationId);
            animation.setAnimationListener(new EMailService() {
                    public void onAnimationStart(Animation animation) {
                        if (!enter)
                            parent.setBackground(null);
                    }

                    public void onAnimationEnd(Animation animation) {
                        if (enter)
                            parent.setBackground(background);
                    }
                });
            return animation;
        }
    }

    public static class Attachment extends Fragment {
        Uri content;
        Drawable icon;
        TextView fileName;
        String contentType;

        public Attachment(Drawable icon) {
            this.icon=icon;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
           return inflater.inflate(R.layout.email_message_composing_attachment, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            ImageView icon=view.findViewById(R.id.email_message_composing_attachment);
            icon.setImageDrawable(this.icon);
            fileName=view.findViewById(R.id.email_message_composing_attachment_file_name);
            View fileNameLayoutClickable=view.findViewById(R.id.email_message_composing_attachment_file_name_layout_clickable);
            fileNameLayoutClickable.setOnClickListener(new EMailService() {
                public void onClick(View view) {
                    ((EMailMessageComposing) EMailService.getActivityCurrent()).changeFileName(Attachment.this);
                }
            });
        }
    }

    public static class EnteringFileName extends Fragment {
        EMailMessageComposing eMailMessageComposing;
        EMailService enteringFileNameClickListener;
        Attachment attachmentToEnterFileName;
        EditText enter;
        View parent;
        boolean changingFileName;
        Animation animationEnter;
        Animation animationExit;


        public EnteringFileName(EMailMessageComposing eMailMessageComposing, View parent) {
            this.eMailMessageComposing=eMailMessageComposing;
            this.parent=parent;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_composing_entering_file_name, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            View eMailMessageComposingCurrentFocus=eMailMessageComposing.getCurrentFocus();
            if (eMailMessageComposingCurrentFocus!=null)
                eMailMessageComposingCurrentFocus.clearFocus();
            View ok = view.findViewById(R.id.email_message_composing_entering_file_name_ok_layout_clickable);
            View cancel = view.findViewById(R.id.email_message_composing_entering_file_name_cancel_layout_clickable);
            if (enteringFileNameClickListener==null) {
                enteringFileNameClickListener = new EMailService() {
                    final int okId = ok.getId();

                    public void onClick(View view) {
                        final int viewId = view.getId();
                        if (viewId == okId) {
                            attachmentToEnterFileName.fileName.setText(enter.getText().toString());
                        } else
                            attachmentToEnterFileName.fileName.setText("");
                        eMailMessageComposing.fragmentManager.beginTransaction()
                                .remove(EnteringFileName.this)
                                .commit();
                        View eMailMessageComposingCurrentFocus=eMailMessageComposing.getCurrentFocus();
                        if (eMailMessageComposingCurrentFocus != null)
                            eMailMessageComposingCurrentFocus.clearFocus();
                    }
                };
            }
            ok.setOnClickListener(enteringFileNameClickListener);
            cancel.setOnClickListener(enteringFileNameClickListener);
            enter=view.findViewById(R.id.email_message_composing_entering_file_name_enter);
        }

        public void onStart() {
            enter.requestFocus();
            enter.postDelayed((Runnable) () -> {
                eMailMessageComposing.keyboard.showSoftInput(enter, 0);
            }, 100);
            if (changingFileName) {
                enter.setText(attachmentToEnterFileName.fileName.getText().toString());
                changingFileName=false;
            }
            else
                if (!enter.getText().toString().isEmpty())
                    enter.setText("");
            super.onStart();
        }

        public void setAttachmentToEnterFileName(Attachment attachmentIconToEnterFileName) {
            this.attachmentToEnterFileName=attachmentIconToEnterFileName;
        }

        public Animation onCreateAnimation(int anim, boolean enter, int animNext) {
            if (enter) {
                if (animationEnter == null)
                    animationEnter=eMailMessageComposing.createPopUpWindowAnimation(true);
                return animationEnter;
            } else if (animationExit == null)
                animationExit=eMailMessageComposing.createPopUpWindowAnimation(false);
            return animationExit;
        }
    }

    public static class ConfirmingSendingEmptyMessage extends Fragment {
        EMailMessageComposing eMailMessageComposing;
        View yes;
        View no;
        Animation animationEnter;
        Animation animationExit;

        public ConfirmingSendingEmptyMessage(EMailMessageComposing eMailMessageComposing) {
            this.eMailMessageComposing=eMailMessageComposing;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_composing_confirming_sending_empty_message, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            yes = view.findViewById(R.id.email_message_composing_confirming_sending_empty_message_yes);
            no = view.findViewById(R.id.email_message_composing_confirming_sending_empty_message_no);
        }

        public Animation onCreateAnimation(int anim, boolean enter, int animNext) {
            if (enter) {
                if (animationEnter == null)
                    animationEnter=eMailMessageComposing.createPopUpWindowAnimation(true);
                return animationEnter;
            } else if (animationExit == null)
                animationExit=eMailMessageComposing.createPopUpWindowAnimation(false);
            return animationExit;
        }
    }
}
