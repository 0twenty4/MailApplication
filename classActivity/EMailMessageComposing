package com.example.mailapplication;

import android.content.Context;
import android.content.Intent;
import android.content.res.ColorStateList;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;

import android.os.Bundle;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.view.ViewGroup;
import android.view.LayoutInflater;


import static android.view.View.VISIBLE;
import static android.view.View.INVISIBLE;
import static android.view.View.GONE;

import java.util.ArrayList;


public class EMailMessageComposing extends AppCompatActivity {
    LinearLayout toLayout;
    EditText toLayoutOrigin;
    ToLayoutEnter toLayoutEnter;
    int black;
    ColorStateList transparent;
    ArrayList<LayoutPart> toLayoutParts = new ArrayList<>();
    int toLayoutPartEditCount;
    boolean modeEditLayoutPartOn;
    EMailService toLayoutTextChangedListener;
    InputMethodManager keyboard;
    boolean keyboardShown;
    FragmentManager fragmentManager;


    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.email_message_composing);
        EMailService.setCurrentActivity(this, R.id.email_message_composing);
        FrameLayout fromLayout = findViewById(R.id.email_message_composing_from_layout);
        String currentUserEMailAddress = EMailService.getCurrentUserEMailAddress();
        LayoutPart fromLayoutPart = new LayoutPart();
        fromLayoutPart.setLayoutPartData(currentUserEMailAddress, true, true);
        int fromLayoutId = fromLayout.getId();
        getSupportFragmentManager().beginTransaction()
                .add(fromLayoutId, fromLayoutPart)
                .commit();
        toLayout = findViewById(R.id.email_message_composing_to_layout);
        fragmentManager = getSupportFragmentManager();
        toLayoutTextChangedListener = new EMailService() {
            public void onTextChanged(CharSequence text, int start, int count, int after) {
                final int charactersCount = text.length();
                if (charactersCount > 0) {
                    char characterLast = text.charAt(charactersCount - 1);
                    if (characterLast == ' ') {
                        if (charactersCount != 1) {
                            if (modeEditLayoutPartOn) {
                                toLayoutEnter.getView().setAlpha(0);
                                finishLastLayoutPartEdit(true);
                                toLayout.addView(toLayoutOrigin, 0);
                                toLayoutOrigin.requestFocus();
                                modeEditLayoutPartOn = false;
                            } else {
                                String eMailAddress=toLayoutOrigin.getText().toString();
                                addToLayoutPart(getEMailAddressWithNoSpace(eMailAddress), toLayout.getChildCount());
                            }
                        }
                        toLayoutOrigin.setText("");
                    }
                }
            }
        };
        toLayoutOrigin = findViewById(R.id.email_message_composing_to_origin);
        transparent = ColorStateList.valueOf(getColor(R.color.transparent));
        toLayoutOrigin.setBackgroundTintList(transparent);
        toLayoutOrigin.addTextChangedListener(toLayoutTextChangedListener);
        EditText subject = findViewById(R.id.email_message_composing_subject);
        subject.setBackgroundTintList(transparent);
        subject.setFocusable(false);
        EditText content = findViewById(R.id.email_message_composing_content);
        content.setBackgroundTintList(transparent);
        content.setFocusable(false);
        ImageView back = findViewById(R.id.email_message_composing_back);
        ImageView attachment = findViewById(R.id.email_message_composing_attachment);
        ImageView send = findViewById(R.id.email_message_composing_send);
        View toLayoutClickable = findViewById(R.id.email_message_composing_to_layout_clickable);
        View contentLayoutClickable = findViewById(R.id.email_message_composing_content_layout_clickable);
        keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
        EMailService eMailMessageComposingClickListener = new EMailService() {
            final int backId = back.getId();
            final int attachmentId = attachment.getId();
            final int sendId = send.getId();
            final int toLayoutClickableId = toLayoutClickable.getId();
            final int contentLayoutClickableId = contentLayoutClickable.getId();

            public void onClick(View view) {
                final int viewId = view.getId();
                if (viewId == backId)
                    onBackPressed();
                else if (viewId == attachmentId) {
                    Intent intent = new Intent();
                    intent.setAction(Intent.ACTION_OPEN_DOCUMENT);
                } else {
                    final View currentFocus = getCurrentFocus();
                    if (currentFocus != null)
                        currentFocus.clearFocus();
                    if (viewId == sendId) {
                        if (keyboardShown) {
                            keyboard.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(), 0);
                            keyboardShown = false;
                        }
                        EMailService.sendEMailMessage(toLayoutParts, subject, content);
                    } else {
                        final View viewToShowKeyboard;
                        if (viewId == toLayoutClickableId) {
                            subject.setFocusable(false);
                            content.setFocusable(false);
                            toLayout.addView(toLayoutOrigin, 0);
                            toLayoutOrigin.requestFocus();
                            toLayoutClickable.setVisibility(GONE);
                            viewToShowKeyboard = toLayoutOrigin;
                        } else {
                                toLayout.removeView(toLayoutOrigin);
                                if (viewId == contentLayoutClickableId) {
                                    content.setFocusableInTouchMode(true);
                                    content.setFocusable(true);
                                    content.requestFocus();
                                    viewToShowKeyboard = content;
                                } else {
                                    subject.setFocusableInTouchMode(true);
                                    subject.setFocusable(true);
                                    subject.requestFocus();
                                    viewToShowKeyboard = subject;
                                }
                                if (modeEditLayoutPartOn) {
                                    modeEditLayoutPartOn = false;
                                    if (!toLayoutEnter.enter.getText().toString().isEmpty())
                                        finishLastLayoutPartEdit(false);
                                    else
                                        toLayout.removeViewAt(toLayoutPartEditCount);
                                } else {
                                    final String toLayoutOriginText = toLayoutOrigin.getText().toString();
                                    if (!toLayoutOriginText.isEmpty())
                                        addToLayoutPart(toLayoutOriginText, toLayout.getChildCount());
                                }
                                toLayoutOrigin.setText("");
                                toLayoutClickable.setVisibility(VISIBLE);
                                toLayoutClickable.bringToFront();
                            }
                        if (!keyboardShown) {
                            System.out.println("hellO");
                            keyboard.showSoftInput(viewToShowKeyboard, InputMethodManager.SHOW_FORCED);
                            keyboardShown = true;
                        }
                    }
                }
            }
        };
        back.setOnClickListener(eMailMessageComposingClickListener);
        attachment.setOnClickListener(eMailMessageComposingClickListener);
        send.setOnClickListener(eMailMessageComposingClickListener);
        toLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        View subjectLayoutClickable = findViewById(R.id.email_message_composing_subject_layout_clickable);
        subjectLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        contentLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        toLayoutClickable.bringToFront();
        subjectLayoutClickable.bringToFront();
    }

    public void deleteToLayoutPart(LayoutPart layoutPart) {
        View layoutPartFrame = (View) layoutPart.getView().getParent();
        toLayout.removeView(layoutPartFrame);
        toLayoutParts.remove(layoutPart);
    }

    public void setModeEditLayoutPartOn(LayoutPart toLayoutPart) {
        if (!modeEditLayoutPartOn) {
            modeEditLayoutPartOn = true;
            editLayoutPart(toLayoutPart);
            toLayout.removeView(toLayoutOrigin);
        } else {
            finishLastLayoutPartEdit(false);
            editLayoutPart(toLayoutPart);
        }
    }

    public void editLayoutPart(LayoutPart toLayoutPart) {
        toLayoutPartEditCount = toLayoutParts.indexOf(toLayoutPart);
        toLayoutEnter = new ToLayoutEnter(toLayoutTextChangedListener, toLayoutPart.eMailAddress);
        FrameLayout toLayoutPartFrame = (FrameLayout) toLayoutPart.getView().getParent();
        int toLayoutPartFrameId = toLayoutPartFrame.getId();
        toLayoutPart.getView().setAlpha(0);
        fragmentManager.beginTransaction()
                .replace(toLayoutPartFrameId, toLayoutEnter)
                .commit();
        toLayoutParts.remove(toLayoutPart);
    }

    public void finishLastLayoutPartEdit(boolean eMailAddressHasSpace) {
        final String eMailAddress;
        if (eMailAddressHasSpace)
            eMailAddress=getEMailAddressWithNoSpace(toLayoutEnter.enter.getText().toString());
        else
            eMailAddress=toLayoutEnter.enter.getText().toString();
        LayoutPart toLayoutPart = getLayoutPart(eMailAddress);
        int toLayoutPartFrameId = toLayout.getChildAt(toLayoutPartEditCount).getId();
        fragmentManager.beginTransaction()
                .replace(toLayoutPartFrameId, toLayoutPart)
                .commit();
    }

    public void addToLayoutPart(String eMailAddress, int count) {
        FrameLayout toLayoutPartFrame=new FrameLayout(this);
        toLayout.addView(toLayoutPartFrame, count);
        toLayoutPartFrame.setId(View.generateViewId());
        fragmentManager.beginTransaction()
                .add(toLayoutPartFrame.getId(), getLayoutPart(eMailAddress))
                .commit();
    }

    public LayoutPart getLayoutPart(String eMailAddress) {
        final LayoutPart toLayoutPart = new LayoutPart();
        if (EMailService.eMailAddressValid(eMailAddress))
            toLayoutPart.setLayoutPartData(eMailAddress, true, false);
        else
            toLayoutPart.setLayoutPartData(eMailAddress, false, false);
        if (modeEditLayoutPartOn)
            toLayoutParts.add(toLayoutPartEditCount, toLayoutPart);
        else
            toLayoutParts.add(toLayoutPart);
        return toLayoutPart;
    }

    public String getEMailAddressWithNoSpace(String eMailAddress) {
        String eMailAddressWithNoSpace=new StringBuilder(eMailAddress)
                .deleteCharAt(eMailAddress.length()-1)
                .toString();
        return eMailAddressWithNoSpace;
    }

    public void onBackPressed() {
        if (keyboardShown)
            keyboardShown = false;
        else {
            if (modeEditLayoutPartOn) {
                String space = "space ";
                toLayoutTextChangedListener.onTextChanged(space, 0, 0, 0);
            } else {
                Intent intent = new Intent(this, MenuMain.class);
                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
                startActivity(intent);
            }
        }
    }

    public static class ToLayoutEnter extends Fragment {
        EMailService toLayoutTextChangedListener;
        boolean hasTextChangedListener;
        EditText enter;
        private String eMailAddress;

        public ToLayoutEnter(EMailService toLayoutTextChangedListener, String eMailAddress) {
            this.toLayoutTextChangedListener = toLayoutTextChangedListener;
            this.eMailAddress=eMailAddress;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.to_layout_enter, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            super.onStart();
            enter = view.findViewById(R.id.enter);
            enter.setText(eMailAddress);
            enter.requestFocus();
            ((EMailMessageComposing) EMailService.getActivityCurrent()).keyboard.showSoftInput(enter, 0);
            enter.addTextChangedListener(toLayoutTextChangedListener);
            hasTextChangedListener = true;

        }
    }
}
