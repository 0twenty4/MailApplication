package com.example.mailapplication;

import android.content.Context;
import android.content.Intent;
import android.content.res.ColorStateList;
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Toast;

import static android.view.View.VISIBLE;
import static android.view.View.GONE;

import java.util.ArrayList;


public class EMailMessageComposing extends AppCompatActivity {
    LinearLayout toLayout;
    EditText toLayoutEnter;
    ArrayList<LayoutPart> toLayoutParts=new ArrayList<>();
    int toLayoutPartEditCount;
    boolean modeEditEMailAddressOn;
    EMailService toLayoutTextChangedListener;
    InputMethodManager keyboard;
    boolean keyboardShown;

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.email_message_composing);
        EMailService.setCurrentActivity(this, R.id.email_message_composing);
        FrameLayout fromLayout=findViewById(R.id.email_message_composing_from_layout);
        String currentUserEMailAddress=EMailService.getCurrentUserEMailAddress();
        LayoutPart fromLayoutPartChecked=new LayoutPart(currentUserEMailAddress, true, true);
        int fromLayoutId=fromLayout.getId();
        getSupportFragmentManager().beginTransaction()
                .add(fromLayoutId, fromLayoutPartChecked)
                .commit();
        toLayout=findViewById(R.id.email_message_composing_to_layout);
        toLayoutTextChangedListener=new EMailService() {
            public void onTextChanged(CharSequence text, int start, int count, int after) {
                final int charactersCount = text.length();
                if (charactersCount > 0) {
                    char characterLast = text.charAt(charactersCount - 1);
                    if (characterLast == ' ') {
                        if (charactersCount != 1) {
                            if (modeEditEMailAddressOn) {
                                toLayout.removeView(toLayoutEnter);
                                addToLayoutPart(toLayoutPartEditCount);
                                toLayout.addView(toLayoutEnter, 0);
                                toLayoutEnter.requestFocus();
                                modeEditEMailAddressOn=false;
                            } else {
                                addToLayoutPart(toLayout.getChildCount());
                            }
                        }
                        toLayoutEnter.setText("");
                    }
                }
            }
        };
        toLayoutEnter=findViewById(R.id.email_message_composing_to_enter);
        ColorStateList transparent=ColorStateList.valueOf(getColor(R.color.transparent));
        toLayoutEnter.setBackgroundTintList(transparent);
        toLayoutEnter.addTextChangedListener(toLayoutTextChangedListener);
        EditText subject=findViewById(R.id.email_message_composing_subject);
        subject.setBackgroundTintList(transparent);
        EditText content=findViewById(R.id.email_message_composing_content);
        content.setBackgroundTintList(transparent);
        ImageView back=findViewById(R.id.email_message_composing_back);
        ImageView attachment=findViewById(R.id.email_message_composing_attachment);
        ImageView send=findViewById(R.id.email_message_composing_send);
        View toLayoutClickable=findViewById(R.id.email_message_composing_to_layout_clickable);
        View contentLayoutClickable=findViewById(R.id.email_message_composing_content_layout_clickable);
        keyboard=(InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
        EMailService eMailMessageComposingClickListener= new EMailService() {
            final int backId = back.getId();
            final int attachmentId=attachment.getId();
            final int sendId=send.getId();
            final int toLayoutClickableId=toLayoutClickable.getId();
            final int contentLayoutClickableId = contentLayoutClickable.getId();

            public void onClick(View view) {
                final int viewId = view.getId();
                if (viewId == backId)
                    onBackPressed();
                else if (viewId == attachmentId) {
                    Intent intent = new Intent();
                    intent.setAction(Intent.ACTION_OPEN_DOCUMENT);
                } else {
                    final View currentFocus=getCurrentFocus();
                    if (currentFocus!=null)
                        currentFocus.clearFocus();
                    if (viewId == sendId) {
                        if (keyboardShown) {
                            keyboard.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(), 0);
                            keyboardShown = false;
                        }
                        EMailService.sendEMailMessage(toLayoutParts, subject, content);
                    } else {
                        final View viewToShowKeyboard;
                        if (viewId == toLayoutClickableId) {
                            toLayout.addView(toLayoutEnter, 0);
                            String toLayoutEnterText = toLayoutEnter.getText().toString();
                            if (!toLayoutEnterText.isEmpty())
                                toLayoutEnter.setText("");
                            toLayoutEnter.requestFocus();
                            toLayoutClickable.setVisibility(GONE);
                            viewToShowKeyboard=toLayoutEnter;
                        } else {
                            if (viewId == contentLayoutClickableId) {
                                content.requestFocus();
                                viewToShowKeyboard=content;
                            }
                            else {
                                subject.requestFocus();
                                viewToShowKeyboard=subject;
                            }
                            toLayout.removeView(toLayoutEnter);
                            final boolean toLayoutEnterEmpty=toLayoutEnter.getText().toString().isEmpty();
                            if (modeEditEMailAddressOn) {
                                modeEditEMailAddressOn = false;
                                if (!toLayoutEnterEmpty)
                                    addToLayoutPart(toLayoutPartEditCount);
                            } else {
                                if (!toLayoutEnterEmpty)
                                    addToLayoutPart(0);
                            }
                            toLayoutClickable.setVisibility(VISIBLE);
                        }
                        if (!keyboardShown) {
                            System.out.println("hellO");
                            keyboard.showSoftInput(viewToShowKeyboard, InputMethodManager.SHOW_FORCED);
                            keyboardShown=true;
                        }
                    }
                }
            }
        };
        back.setOnClickListener(eMailMessageComposingClickListener);
        attachment.setOnClickListener(eMailMessageComposingClickListener);
        send.setOnClickListener(eMailMessageComposingClickListener);
        toLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        View subjectLayoutClickable=findViewById(R.id.email_message_composing_subject_layout_clickable);
        subjectLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        contentLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        toLayoutClickable.bringToFront();
        subjectLayoutClickable.bringToFront();
    }

    public void deleteToLayoutPart(LayoutPart layoutPart) {
        System.out.println("im here");
        View layoutPartFrame=(View) layoutPart.getView().getParent();
        toLayout.removeView(layoutPartFrame);
        toLayoutParts.remove(layoutPart);
    }

    public void setModeEditLayoutPartOn(LayoutPart toLayoutPart) {
        toLayout.removeView(toLayoutEnter);
        if (!modeEditEMailAddressOn) {
            modeEditEMailAddressOn = true;
        } else {
            addToLayoutPart(toLayoutPartEditCount);
        }
        toLayoutPartEditCount=toLayoutParts.indexOf(toLayoutPart);
        toLayoutParts.remove(toLayoutPart);
        toLayout.removeViewAt(toLayoutPartEditCount);
        toLayout.addView(toLayoutEnter, toLayoutPartEditCount);
        toLayoutEnter.requestFocus();
        toLayoutEnter.removeTextChangedListener(toLayoutTextChangedListener);
        String eMailAddress=toLayoutPart.eMailAddress;
        String eMailAddressWithNoSpace=new StringBuilder(eMailAddress).deleteCharAt(eMailAddress.length()-1).toString();
        toLayoutEnter.setText(eMailAddressWithNoSpace);
        toLayoutEnter.setSelection(eMailAddress.length()-1);
        toLayoutEnter.addTextChangedListener(toLayoutTextChangedListener);
    }

    public void addToLayoutPart(int count) {
        FrameLayout toLayoutPartFrame = new FrameLayout(this);
        toLayout.addView(toLayoutPartFrame, count);
        toLayoutPartFrame.setId(View.generateViewId());
        int toLayoutPartFrameId = toLayoutPartFrame.getId();
        String eMailAddress=toLayoutEnter.getText().toString();
        final LayoutPart toLayoutPart;
        if (EMailService.eMailAddressValid(eMailAddress)) {
            toLayoutPart = new LayoutPart(eMailAddress, true, false);
        }
        else {
            toLayoutPart = new LayoutPart(eMailAddress, false, false);
        }
        getSupportFragmentManager().beginTransaction()
                .add(toLayoutPartFrameId, toLayoutPart)
                .commit();
        if (modeEditEMailAddressOn)
            toLayoutParts.add(toLayoutPartEditCount, toLayoutPart);
        else
            toLayoutParts.add(toLayoutPart);
    }

    public void onBackPressed() {
        if (keyboardShown)
            keyboardShown = false;
        else {
            if (modeEditEMailAddressOn) {
                String space = "space ";
                toLayoutTextChangedListener.onTextChanged(space, 0, 0, 0);
            } else {
                Intent intent = new Intent(this, MenuMain.class);
                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
                startActivity(intent);
            }
        }
    }
}
