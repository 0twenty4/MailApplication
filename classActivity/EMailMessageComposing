package com.example.mailapplication;

import android.animation.Animator;
import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.os.Parcelable;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.Editable;
import android.text.method.KeyListener;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.Space;

public class EMailMessageComposing extends AppCompatActivity {
    boolean eMailMessageComposingEMailAddressFromCorrect;
    boolean eMailMessageComposingEMailAddressFromChecked;
    boolean eMailMessageComposingEMailAddressToCorrect;
    boolean eMailMessageComposingEMailAddressToChecked;

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.email_message_composing);
        EMailService.setCurrentActivity(this, R.id.email_message_composing);
        final HorizontalScrollView fromScroll=findViewById(R.id.email_message_composing_from_scroll);
        final LinearLayout fromLayout=findViewById(R.id.email_message_composing_from_layout);
        final HorizontalScrollView toScroll=findViewById(R.id.email_message_composing_to_scroll);
        final LinearLayout toLayout=findViewById(R.id.email_message_composing_to_layout);
        View fromLayoutClickable=findViewById(R.id.email_message_composing_from_layout_clickable);
        View toLayoutClickable=findViewById(R.id.email_message_composing_to_layout_clickable);
        EMailService fromAndToLayoutClickableClickListener=new EMailService() {
            public void onClick(View view) {
                final LinearLayout layout;
                int viewId=view.getId();
                int fromLayoutClickableId=fromLayoutClickable.getId();
                if (viewId==fromLayoutClickableId)
                    layout=fromLayout;
                else
                    layout=toLayout;
                View layoutPart=layout.getChildAt(0);
                layoutPart.requestFocus();
            }
        };
        fromLayoutClickable.setOnClickListener(fromAndToLayoutClickableClickListener);
        toLayoutClickable.setOnClickListener(fromAndToLayoutClickableClickListener);
        EditText fromLayoutPartOrigin=findViewById(R.id.email_message_composing_from_layout_part_origin);
        EditText toLayoutPartOrigin=findViewById(R.id.email_message_composing_to_layout_part_origin);
        EMailService fromAndToLayoutPartFocusChangeListener=new EMailService() {
            public void onFocusChange(View view, boolean hasFocus) {

            }
        };
        EMailService fromAndToLayoutPartTextChangedListener=new EMailService() {
            public void onTextChanged(CharSequence content, int start, int count, int after) {
                int charactersAmount = content.length();
                if (charactersAmount != 0) {
                    char characterLast = content.charAt(charactersAmount - 1);
                    if (characterLast == ' ') {
                        EditText layoutPartCurrent = (EditText) getCurrentFocus();
                        if (charactersAmount == 1) {
                            ((EditText) getCurrentFocus()).setText("");
                        } else {
                            Drawable layoutPartBackground = getDrawable(R.drawable.background_email_message_composing_from_to_layout_part);
                            layoutPartCurrent.setBackground(layoutPartBackground);
                            int white = getColor(R.color.white);
                            layoutPartCurrent.setTextColor(white);
                            EditText layoutPart = new EditText(EMailMessageComposing.this);
                            layoutPart.setTextSize(20);
                            int black = getColor(R.color.black);
                            layoutPart.setTextColor(black);
                            LinearLayout layout = (LinearLayout) layoutPartCurrent.getParent();
                            layoutPart.setOnFocusChangeListener(fromAndToLayoutPartFocusChangeListener);
                            layout.addView(layoutPart);
                            layoutPart.requestFocus();
                        }
                    }
                }
            }
        };
        fromLayoutPartOrigin.addTextChangedListener(fromAndToLayoutPartTextChangedListener);
        toLayoutPartOrigin.addTextChangedListener(fromAndToLayoutPartTextChangedListener);

    }

    public void animateTranslationX(ImageView view, float translationX, int duration, int times) {
        times--;
        final int timesToAnimate=times;
        if (timesToAnimate==0) {
            view.animate()
                    .translationX(0)
                    .setDuration(duration)
                    .setListener(new EMailService() {
                        public void onAnimationEnd(Animator animator) {
                            view.clearAnimation();
                            ImageView eMailMessageComposingSend=findViewById(R.id.email_message_composing_send);
                            eMailMessageComposingSend.setClickable(true);
                        }
                    })
                    .start();
        } else {
            view.animate()
                    .translationX(translationX)
                    .setDuration(duration)
                    .setListener(new EMailService() {
                        public void onAnimationEnd(Animator animator) {
                            float translationXNext=-translationX;
                            animateTranslationX(view, translationXNext, duration, timesToAnimate);
                        }
                    })
                    .start();
        }
    }

    public void onBackPressed() {
        Intent intent=new Intent(this, MenuMain.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
    }
}

    public void animateTranslationX(ImageView view, float translationX, int duration, int times) {
        times--;
        final int timesToAnimate=times;
        if (timesToAnimate==0) {
            view.animate()
                    .translationX(0)
                    .setDuration(duration)
                    .setListener(new EMailService() {
                        public void onAnimationEnd(Animator animator) {
                            view.clearAnimation();
                            ImageView eMailMessageComposingSend=findViewById(R.id.email_message_composing_send);
                            eMailMessageComposingSend.setClickable(true);
                        }
                    })
                    .start();
        } else {
            view.animate()
                    .translationX(translationX)
                    .setDuration(duration)
                    .setListener(new EMailService() {
                        public void onAnimationEnd(Animator animator) {
                            float translationXNext=-translationX;
                            animateTranslationX(view, translationXNext, duration, timesToAnimate);
                        }
                    })
                    .start();
        }
    }

    public void onBackPressed() {
        Intent intent=new Intent(this, MenuMain.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
    }
}
