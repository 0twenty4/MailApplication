package com.example.mailapplication;

import android.animation.Animator;
import android.animation.ValueAnimator;
import android.content.Intent;

import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;
import androidx.core.view.GestureDetectorCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;

import android.database.Cursor;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.view.ViewGroup;
import android.view.LayoutInflater;
import android.widget.TextView;


import static android.view.View.VISIBLE;
import static android.view.View.GONE;

import java.lang.ref.WeakReference;
import java.util.ArrayList;


public class EMailMessageComposing extends AppCompatActivity {
    LinearLayout recipientsLayout;
    RecipientsLayoutEnter recipientsLayoutEnter;
    View contentLayoutClickable;
    View shadow;
    View top;
    ArrayList<LayoutPart> toLayoutParts;
    int toLayoutPartEditCount;
    boolean modeEditLayoutPartOn;
    boolean hasAttachments;
    EMailService recipientsLayoutTextChangedListener;
    ArrayList<Attachment> attachments;
    ActivityResultLauncher<String> resultLauncher;


    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.email_message_composing);
        View fragmentLoadingLayout = findViewById(R.id.email_message_composing_fragment_loading_layout);
        fragmentLoadingLayout.setVisibility(GONE);
        EMailService.setCurrentActivity(this, R.id.email_message_composing_fragment_loading_layout);
        FrameLayout fromLayout = findViewById(R.id.email_message_composing_from_layout);
        String currentUserEMailAddress = EMailService.getCurrentUserEMailAddress();
        LayoutPart fromLayoutPart = new LayoutPart();
        fromLayoutPart.setLayoutPartData(currentUserEMailAddress, true, true);
        int fromLayoutId = fromLayout.getId();
        getSupportFragmentManager().beginTransaction()
                .add(fromLayoutId, fromLayoutPart)
                .commit();
        recipientsLayout = findViewById(R.id.email_message_composing_recipients_layout);
        recipientsLayoutTextChangedListener = new EMailService() {
            public void onTextChanged(CharSequence text, int start, int count, int after) {
                final int charactersCount = text.length();
                if (charactersCount > 0) {
                    char characterLast = text.charAt(charactersCount - 1);
                    if (characterLast == ' ') {
                        if (charactersCount != 1) {
                            if (modeEditLayoutPartOn) {
                                recipientsLayoutEnter.getView().setAlpha(0);
                                makeToLayoutPartFromRecipientsLayoutEnter();
                                FrameLayout toLayoutEnterLayout = new FrameLayout(EMailMessageComposing.this);
                                toLayoutEnterLayout.setId(View.generateViewId());
                                recipientsLayoutEnter = new RecipientsLayoutEnter(toLayoutEnterLayout, this, true);
                                recipientsLayout.addView(toLayoutEnterLayout, 0);
                                getSupportFragmentManager().beginTransaction()
                                        .add(toLayoutEnterLayout.getId(), recipientsLayoutEnter)
                                        .commitNow();
                                modeEditLayoutPartOn = false;
                            } else {
                                String eMailAddress = recipientsLayoutEnter.enter.getText().toString();
                                addToLayoutPart(getEMailAddressWithNoSpace(eMailAddress), recipientsLayout.getChildCount());
                                recipientsLayoutEnter.enter.setText("");
                            }
                        }
                    }
                }
            }
        };
        FrameLayout toLayoutEnterLayout = new FrameLayout(this);
        toLayoutEnterLayout.setId(View.generateViewId());
        recipientsLayoutEnter = new RecipientsLayoutEnter(toLayoutEnterLayout, recipientsLayoutTextChangedListener, false);
        recipientsLayout.addView(toLayoutEnterLayout);
        getSupportFragmentManager().beginTransaction()
                .add(toLayoutEnterLayout.getId(), recipientsLayoutEnter)
                .commitNow();
        EditText subject = findViewById(R.id.email_message_composing_subject);
        subject.setFocusable(false);
        EditText content = findViewById(R.id.email_message_composing_content);
        content.setFocusable(false);
        ImageView back = findViewById(R.id.email_message_composing_back);
        ImageView attachmentIcon = findViewById(R.id.email_message_composing_attachment_icon);
        ImageView send = findViewById(R.id.email_message_composing_send);
        View recipientsLayoutClickable = findViewById(R.id.email_message_composing_recipients_layout_clickable);
        contentLayoutClickable = findViewById(R.id.email_message_composing_content_layout_clickable_all);
        contentLayoutClickable.bringToFront();
        View subjectLayoutClickable=findViewById(R.id.email_message_composing_subject_layout_clickable);
        FrameLayout attachmentMenuLayout = findViewById(R.id.email_message_composing_attachment_menu_layout);
        attachmentMenuLayout.bringToFront();
        Drawable attachmentMenuBackground = ContextCompat.getDrawable(this, R.drawable.background_email_message_composing_attachment_menu);
        top = findViewById(R.id.email_message_composing_top);
        View popUpWindowLayout = findViewById(R.id.email_message_composing_pop_up_window_layout);
        popUpWindowLayout.setVisibility(GONE);
        EMailService eMailMessageComposingClickListener = new EMailService() {
            EMailService confirmingSendingEmptyMessageClickListener;
            boolean attachmentMenuShown;

            public void onClick(View view) {
                final int viewId = view.getId();
                if (viewId == back.getId()) {
                    Intent intent = new Intent(EMailMessageComposing.this, MenuMain.class);
                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
                    startActivity(intent);
                } else if (viewId == attachmentIcon.getId()) {
                    if (!attachmentMenuShown) {
                        AttachmentMenu attachmentMenu = new AttachmentMenu(EMailMessageComposing.this,
                                attachmentMenuLayout,
                                attachmentMenuBackground);
                        attachmentMenuShown = true;
                        getSupportFragmentManager().beginTransaction()
                                .add(attachmentMenuLayout.getId(), attachmentMenu, "attachment menu")
                                .commit();
                    } else {
                        attachmentMenuShown = false;
                        FragmentManager fragmentManager = getSupportFragmentManager();
                        Fragment attachmentMenu = fragmentManager.findFragmentByTag("attachment menu");
                        if (attachmentMenu != null) {
                            fragmentManager.beginTransaction()
                                    .remove(attachmentMenu)
                                    .commit();
                        } else {
                            attachmentMenuShown = false;
                            attachmentIcon.performClick();
                        }
                    }
                } else if (viewId == send.getId()) {
                    final View currentFocus = getCurrentFocus();
                    if (currentFocus != null) {
                        InputMethodManager keyboard = getApplicationContext().getSystemService(InputMethodManager.class);
                        keyboard.hideSoftInputFromWindow(currentFocus.getWindowToken(), 0);
                        currentFocus.clearFocus();
                    }
                    final int recipientsLayoutViewsCount = recipientsLayout.getChildCount();
                    if (recipientsLayoutViewsCount == 1) {
                        if (recipientsLayoutClickable.getVisibility()==GONE)
                            recipientsLayoutClickable.setVisibility(VISIBLE);
                        if (recipientsLayoutEnter!=null) {
                            final String enterEMailAddress = getString(R.string.enter_email_address);
                            if (recipientsLayoutEnter.enter.getText().toString().isEmpty()) {
                                int red = getColor(R.color.red);
                                recipientsLayoutEnter.enter.setTextColor(red);
                                recipientsLayoutEnter.enter.setText(enterEMailAddress);
                                return;
                            } else if (!recipientsLayoutEnter.enter.getText().toString().equals(enterEMailAddress)) {
                                makeToLayoutPartFromRecipientsLayoutEnter();
                            } else {
                                send.setClickable(false);
                                ValueAnimator toLayoutOriginAnimator = ValueAnimator.ofFloat(0, 5).setDuration(200);
                                final int red = getColor(R.color.red);
                                toLayoutOriginAnimator.addUpdateListener(new EMailService() {
                                    public void onAnimationUpdate(ValueAnimator animator) {
                                        recipientsLayoutEnter.enter.setShadowLayer((float) animator.getAnimatedValue(), 1, 1, red);
                                    }
                                });
                                toLayoutOriginAnimator.addListener(new EMailService() {
                                    public void onAnimationEnd(Animator animator) {
                                        toLayoutOriginAnimator.setFloatValues(5, 0);
                                        toLayoutOriginAnimator.removeAllListeners();
                                        toLayoutOriginAnimator.addListener(new EMailService() {
                                            public void onAnimationEnd(Animator animator) {
                                                send.setClickable(true);
                                            }
                                        });
                                        toLayoutOriginAnimator.start();
                                    }
                                });
                                toLayoutOriginAnimator.start();
                                return;
                            }
                        }
                    }
                    boolean canSend = true;
                    for (LayoutPart toLayoutPart : toLayoutParts) {
                        if (!toLayoutPart.eMailAddressValid)
                            canSend = false;
                    }
                    if (!canSend)
                        return;
                    if (content.getText().toString().isEmpty()) {
                        final ConfirmingSendingEmptyMessage confirmingSendingEmptyMessage = new ConfirmingSendingEmptyMessage
                                (EMailMessageComposing.this);
                        popUpWindowLayout.setVisibility(VISIBLE);
                        getSupportFragmentManager().beginTransaction()
                                .add(popUpWindowLayout.getId(), confirmingSendingEmptyMessage)
                                .commitNow();
                        if (confirmingSendingEmptyMessageClickListener == null) {
                            confirmingSendingEmptyMessageClickListener = new EMailService() {
                                public void onClick(View view) {
                                    final int viewId = view.getId();
                                    getSupportFragmentManager().beginTransaction()
                                            .remove(confirmingSendingEmptyMessage)
                                            .commitNow();
                                    if (viewId == confirmingSendingEmptyMessage.yes.getId())
                                        sendEMailMessage(toLayoutParts, subject, content, attachments);
                                }
                            };
                        }
                        confirmingSendingEmptyMessage.yes.setOnClickListener(confirmingSendingEmptyMessageClickListener);
                        confirmingSendingEmptyMessage.no.setOnClickListener(confirmingSendingEmptyMessageClickListener);
                    } else
                        EMailService.sendEMailMessage(toLayoutParts, subject, content, attachments);
                } else if (viewId == recipientsLayoutClickable.getId()) {
                    final View currentFocus = getCurrentFocus();
                    if (currentFocus != null) {
                        if (subjectLayoutClickable.getVisibility()==GONE)
                            subjectLayoutClickable.setVisibility(VISIBLE);
                        else
                            contentLayoutClickable.setVisibility(VISIBLE);
                        currentFocus.clearFocus();
                    }
                    recipientsLayoutClickable.setVisibility(GONE);
                    subject.setFocusable(false);
                    content.setFocusable(false);
                    if (recipientsLayoutEnter!=null) {
                        final String toLayoutOriginText = recipientsLayoutEnter.enter.getText().toString();
                        if (!toLayoutOriginText.isEmpty()) {
                            recipientsLayoutEnter.enter.setText("");
                            int black = getColor(R.color.black);
                            recipientsLayoutEnter.enter.setTextColor(black);
                        }
                        recipientsLayoutEnter.enter.requestFocus();
                        InputMethodManager keyboard=getApplicationContext().getSystemService(InputMethodManager.class);
                        keyboard.showSoftInput(recipientsLayoutEnter.enter, InputMethodManager.SHOW_FORCED);
                    } else {
                        FrameLayout toLayoutEnterLayout = new FrameLayout(EMailMessageComposing.this);
                        toLayoutEnterLayout.setId(View.generateViewId());
                        recipientsLayout.addView(toLayoutEnterLayout, 0);
                        recipientsLayoutEnter = new RecipientsLayoutEnter(toLayoutEnterLayout, recipientsLayoutTextChangedListener, true);
                        System.out.println(toLayoutEnterLayout);
                        getSupportFragmentManager().beginTransaction()
                                .add(toLayoutEnterLayout.getId(), recipientsLayoutEnter)
                                .commitNow();
                    }
                } else {
                    final View previousFocus = getCurrentFocus();
                    boolean recipientsLayoutIsLastFocus = false;
                    if (previousFocus != null) {
                        if (recipientsLayoutClickable.getVisibility()==GONE)
                            recipientsLayoutClickable.setVisibility(VISIBLE);
                        else if (subjectLayoutClickable.getVisibility()==GONE)
                            subjectLayoutClickable.setVisibility(VISIBLE);
                        else
                            contentLayoutClickable.setVisibility(VISIBLE);
                        previousFocus.clearFocus();
                        final int currentFocusId = previousFocus.getId();
                        if (currentFocusId != subject.getId() && currentFocusId != content.getId())
                            recipientsLayoutIsLastFocus = true;
                    }
                    if (recipientsLayoutIsLastFocus) {
                        final String recipientsLayoutEnterText = recipientsLayoutEnter.enter.getText().toString();
                        if (modeEditLayoutPartOn) {
                            modeEditLayoutPartOn = false;
                            if (!recipientsLayoutEnterText.isEmpty())
                                makeToLayoutPartFromRecipientsLayoutEnter();
                            else
                                removeToLayoutEnter();
                        } else {
                            if (!recipientsLayoutEnterText.isEmpty()) {
                                final String enterEMailAddress = getString(R.string.enter_email_address);
                                if (!recipientsLayoutEnterText.equals(enterEMailAddress)) {
                                    makeToLayoutPartFromRecipientsLayoutEnter();
                                }
                            } else {
                                final int toLayoutViewsCount = recipientsLayout.getChildCount();
                                if (toLayoutViewsCount > 1)
                                    removeToLayoutEnter();
                            }
                        }
                    }
                    final View viewToShowKeyboard;
                    if (viewId == contentLayoutClickable.getId()) {
                        contentLayoutClickable.setVisibility(GONE);
                        subject.setFocusable(false);
                        content.setFocusableInTouchMode(true);
                        content.setFocusable(true);
                        content.requestFocus();
                        viewToShowKeyboard = content;
                    } else {
                        subjectLayoutClickable.setVisibility(GONE);
                        content.setFocusable(false);
                        subject.setFocusableInTouchMode(true);
                        subject.setFocusable(true);
                        subject.requestFocus();
                        viewToShowKeyboard = subject;
                    }
                    InputMethodManager keyboard = getApplicationContext().getSystemService(InputMethodManager.class);
                    keyboard.showSoftInput(viewToShowKeyboard, InputMethodManager.SHOW_FORCED);
                }
            }
        };
        back.setOnClickListener(eMailMessageComposingClickListener);
        attachmentIcon.setOnClickListener(eMailMessageComposingClickListener);
        send.setOnClickListener(eMailMessageComposingClickListener);
        recipientsLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        subjectLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        contentLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        recipientsLayoutClickable.bringToFront();
        subjectLayoutClickable.bringToFront();
        shadow = findViewById(R.id.email_message_composing_shadow);
        shadow.bringToFront();
        Drawable attachmentLayoutBackground = ContextCompat.getDrawable(this, R.drawable.background_attachment_layout);
        resultLauncher = registerForActivityResult(new ActivityResultContracts.GetContent(),
                (ActivityResultCallback<Uri>) (uri) -> {
                    InputMethodManager keyboard = getApplicationContext().getSystemService(InputMethodManager.class);
                    keyboard.showSoftInput(content, 0);
                    Cursor cursor = getContentResolver().query(uri, null, null, null, null);
                    cursor.moveToFirst();
                    String contentType = cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.MIME_TYPE));
                    final AttachmentLayout attachmentLayout;
                    final Drawable icon;
                    if (contentType.startsWith("image/")) {
                        attachmentLayout = findViewById(R.id.email_message_composing_attachment_image_layout);
                        Drawable imageIcon = ContextCompat.getDrawable(EMailMessageComposing.this, R.drawable.attachment_image);
                        icon = imageIcon;
                    } else if (contentType.startsWith("application/")) {
                        attachmentLayout = findViewById(R.id.email_message_composing_attachment_document_layout);
                        Drawable documentIcon = ContextCompat.getDrawable(EMailMessageComposing.this, R.drawable.attachment_document);
                        icon = documentIcon;
                    } else {
                        attachmentLayout = findViewById(R.id.email_message_composing_attachment_audio_layout);
                        Drawable audioIcon = ContextCompat.getDrawable(EMailMessageComposing.this, R.drawable.attachment_audio);
                        icon = audioIcon;
                    }
                    final View attachmentLayoutParent = (View) attachmentLayout.getParent();
                    if (attachmentLayoutParent.getBackground() == null)
                        attachmentLayoutParent.setBackground(attachmentLayoutBackground);
                    EnteringFileName enteringFileName = new EnteringFileName(EMailMessageComposing.this, popUpWindowLayout);
                    Attachment attachment = new Attachment(EMailMessageComposing.this, icon);
                    enteringFileName.setAttachmentToEnterFileName(attachment);
                    View eMailMessageComposingCurrentFocus = getCurrentFocus();
                    if (eMailMessageComposingCurrentFocus != null)
                        eMailMessageComposingCurrentFocus.clearFocus();
                    popUpWindowLayout.setVisibility(VISIBLE);
                    getSupportFragmentManager().beginTransaction()
                            .add(attachmentLayout.getId(), attachment)
                            .add(popUpWindowLayout.getId(), enteringFileName)
                            .commitNow();
                    if (!hasAttachments) {
                        hasAttachments = true;
                        contentLayoutClickable.setVisibility(GONE);
                        contentLayoutClickable=findViewById(R.id.email_message_composing_content_layout_clickable_text);
                        contentLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
                        contentLayoutClickable.bringToFront();
                    }
                    attachment.content = uri;
                    attachment.contentType = contentType;
                    if (attachments == null)
                        attachments = new ArrayList<>();
                    attachments.add(attachment);
                });
    }

    public void deleteToLayoutPart(LayoutPart layoutPart) {
        View layoutPartFrame = (View) layoutPart.getView().getParent();
        getSupportFragmentManager().beginTransaction()
                .remove(layoutPart)
                .commitNow();
        recipientsLayout.removeView(layoutPartFrame);
        toLayoutParts.remove(layoutPart);
    }

    public void setModeEditLayoutPartOn(LayoutPart toLayoutPart) {
        if (!modeEditLayoutPartOn) {
            modeEditLayoutPartOn = true;
            removeToLayoutEnter();
            editLayoutPart(toLayoutPart);
        } else {
            makeToLayoutPartFromRecipientsLayoutEnter();
            editLayoutPart(toLayoutPart);
        }
    }

    public void editLayoutPart(LayoutPart toLayoutPart) {
        toLayoutPartEditCount = toLayoutParts.indexOf(toLayoutPart);
        FrameLayout toLayoutPartFrame = (FrameLayout) toLayoutPart.getView().getParent();
        recipientsLayoutEnter = new RecipientsLayoutEnter(toLayoutPartFrame, recipientsLayoutTextChangedListener, true);
        final String eMailAddress=toLayoutPart.eMailAddress;
        recipientsLayoutEnter.setEMailAddress(eMailAddress);
        toLayoutPart.getView().setAlpha(0);
        getSupportFragmentManager().beginTransaction()
                .replace(toLayoutPartFrame.getId(), recipientsLayoutEnter)
                .commit();
        toLayoutParts.remove(toLayoutPart);
    }

    public void makeToLayoutPartFromRecipientsLayoutEnter() {
        final String toLayoutEnterText= recipientsLayoutEnter.enter.getText().toString();
        final boolean toLayoutEnterTextHasEndSpace=toLayoutEnterText.charAt(toLayoutEnterText.length()-1)==' ';
        final String eMailAddress;
        if (toLayoutEnterTextHasEndSpace)
            eMailAddress = getEMailAddressWithNoSpace(recipientsLayoutEnter.enter.getText().toString());
        else
            eMailAddress = toLayoutEnterText;
        LayoutPart toLayoutPart = getLayoutPart(eMailAddress);
        recipientsLayoutEnter.getView().setAlpha(0);
        getSupportFragmentManager().beginTransaction()
                .replace(recipientsLayoutEnter.parent.getId(), toLayoutPart)
                .commitNow();
        recipientsLayoutEnter=null;
    }

    public void removeToLayoutEnter() {
        getSupportFragmentManager().beginTransaction()
                .remove(recipientsLayoutEnter)
                .commitNow();
        View toLayoutEnterLayout = recipientsLayoutEnter.parent;
        recipientsLayout.removeView(toLayoutEnterLayout);
        recipientsLayoutEnter = null;
    }

    public void addToLayoutPart(String eMailAddress, int count) {
        FrameLayout toLayoutPartFrame = new FrameLayout(this);
        recipientsLayout.addView(toLayoutPartFrame, count);
        toLayoutPartFrame.setId(View.generateViewId());
        getSupportFragmentManager().beginTransaction()
                .add(toLayoutPartFrame.getId(), getLayoutPart(eMailAddress))
                .commit();
    }

    public LayoutPart getLayoutPart(String eMailAddress) {
        final LayoutPart toLayoutPart = new LayoutPart();
        if (EMailService.eMailAddressValid(eMailAddress))
            toLayoutPart.setLayoutPartData(eMailAddress, true, false);
        else
            toLayoutPart.setLayoutPartData(eMailAddress, false, false);
        if (toLayoutParts == null)
            toLayoutParts = new ArrayList<>();
        if (modeEditLayoutPartOn)
            toLayoutParts.add(toLayoutPartEditCount, toLayoutPart);
        else
            toLayoutParts.add(toLayoutPart);
        return toLayoutPart;
    }

    public String getEMailAddressWithNoSpace(String eMailAddress) {
        String eMailAddressWithNoSpace = new StringBuilder(eMailAddress)
                .deleteCharAt(eMailAddress.length() - 1)
                .toString();
        return eMailAddressWithNoSpace;
    }

    public void changeFileName(Attachment attachment) {
        View popUpWindowLayout = findViewById(R.id.email_message_composing_pop_up_window_layout);
        EnteringFileName enteringFileName = new EnteringFileName(this, popUpWindowLayout);
        enteringFileName.changingFileName = true;
        enteringFileName.attachmentToEnterFileName = attachment;
        popUpWindowLayout.setVisibility(VISIBLE);
        getSupportFragmentManager().beginTransaction()
                .add(enteringFileName.parent.getId(), enteringFileName)
                .commitNow();
    }


    public Animation createPopUpWindowAnimation(boolean enter) {
        final View popUpWindowLayout = findViewById(R.id.email_message_composing_pop_up_window_layout);
        final int animationId;
        if (enter)
            animationId = R.anim.fade_from_invisible_to_visible;
        else
            animationId = R.anim.fade_from_visible_to_invisible;
        final Animation animation = AnimationUtils.loadAnimation(this, animationId);
        animation.setAnimationListener(new EMailService() {
            public void onAnimationStart(Animation animation) {
                final float alphaTo;
                if (enter) {
                    shadow.setVisibility(VISIBLE);
                    alphaTo = 1;
                } else
                    alphaTo = 0;
                shadow.animate()
                        .alpha(alphaTo)
                        .setDuration(150)
                        .start();
            }

            public void onAnimationEnd(Animation animation) {
                if (!enter) {
                    shadow.setVisibility(GONE);
                    popUpWindowLayout.postDelayed((Runnable) () -> {
                        popUpWindowLayout.setVisibility(GONE);
                    }, 100);
                }
            }
        });
        return animation;
    }

    public void onBackPressed() {
        final View currentFocus = getCurrentFocus();
        if (currentFocus != null) {
            currentFocus.clearFocus();
            return;
        }
        if (modeEditLayoutPartOn) {
            String recipientsLayoutEnterText = recipientsLayoutEnter.enter.getText().toString();
            if (recipientsLayoutEnterText.isEmpty()) {
                final int recipientsLayoutViewsCount=recipientsLayout.getChildCount();
                if (recipientsLayoutViewsCount!=1)
                    removeToLayoutEnter();
            }
            else
                makeToLayoutPartFromRecipientsLayoutEnter();
            View toLayoutClickable = findViewById(R.id.email_message_composing_recipients_layout_clickable);
            toLayoutClickable.setVisibility(VISIBLE);
            modeEditLayoutPartOn = false;
            return;
        }
        final boolean toLayoutEnterIsFirstView= recipientsLayoutEnter !=null;
        if (toLayoutEnterIsFirstView) {
            final int toLayoutViewsCount = recipientsLayout.getChildCount();
            final String toLayoutEnterText = recipientsLayoutEnter.enter.getText().toString();
            if (toLayoutViewsCount == 1) {
                if (!toLayoutEnterText.isEmpty()) {
                    makeToLayoutPartFromRecipientsLayoutEnter();
                    View toLayoutClickable = findViewById(R.id.email_message_composing_recipients_layout_clickable);
                    toLayoutClickable.setVisibility(VISIBLE);
                    return;
                }
            } else {
                if (toLayoutEnterText.isEmpty())
                    removeToLayoutEnter();
                else
                    makeToLayoutPartFromRecipientsLayoutEnter();
                View toLayoutClickable = findViewById(R.id.email_message_composing_recipients_layout_clickable);
                toLayoutClickable.setVisibility(VISIBLE);
                return;
            }
        }
        FragmentManager fragmentManager=getSupportFragmentManager();
        Fragment attachmentMenu=fragmentManager.findFragmentByTag("attachment menu");
        if (attachmentMenu!=null) {
            fragmentManager.beginTransaction()
                    .remove(attachmentMenu)
                    .commit();
            return;
        }
        Intent intent = new Intent(this, MenuMain.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
    }

    public static class RecipientsLayoutEnter extends Fragment {
        View parent;
        EMailService toLayoutTextChangedListener;
        private String eMailAddress;
        EditText enter;
        boolean needKeyboard;

        public RecipientsLayoutEnter(View parent, EMailService toLayoutTextChangedListener, boolean needKeyboard) {
            this.parent=parent;
            this.toLayoutTextChangedListener=toLayoutTextChangedListener;
            this.needKeyboard=needKeyboard;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.recipients_layout_enter, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            super.onStart();
            enter = view.findViewById(R.id.enter);
            enter.setText(eMailAddress);
            if (needKeyboard) {
                enter.requestFocus();
                EMailMessageComposing eMailMessageComposing = (EMailMessageComposing) EMailService.getActivityCurrent();
                InputMethodManager keyboard = eMailMessageComposing.getApplicationContext().getSystemService(InputMethodManager.class);
                keyboard.showSoftInput (enter, InputMethodManager.SHOW_FORCED);
            }
            enter.addTextChangedListener(toLayoutTextChangedListener);
        }

        public void setEMailAddress(String eMailAddress) {
            this.eMailAddress=eMailAddress;
        }
    }

    public static class AttachmentMenu extends Fragment {
        EMailMessageComposing eMailMessageComposing;
        Drawable background;
        View parent;

        public AttachmentMenu(EMailMessageComposing eMailMessageComposing, View parent, Drawable background) {
            this.eMailMessageComposing = eMailMessageComposing;
            this.parent = parent;
            this.background = background;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_composing_attachment_menu, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            View document = view.findViewById(R.id.email_message_composing_attachment_menu_document_layout_clickable);
            View image = view.findViewById(R.id.email_message_composing_attachment_menu_image_layout_clickable);
            EMailService attachmentMenuClickListener = new EMailService() {
                public void onClick(View view) {
                    final int viewId = view.getId();
                    if (viewId == document.getId())
                        eMailMessageComposing.resultLauncher.launch("application/*");
                    else if (viewId == image.getId())
                        eMailMessageComposing.resultLauncher.launch("image/*");
                    else
                        eMailMessageComposing.resultLauncher.launch("audio/*");
                    final View eMailMessageComposingCurrentFocus = eMailMessageComposing.getCurrentFocus();
                    if (eMailMessageComposingCurrentFocus!=null) {
                        InputMethodManager keyboard = eMailMessageComposing.getApplicationContext().getSystemService(InputMethodManager.class);
                        keyboard.hideSoftInputFromWindow(eMailMessageComposingCurrentFocus.getWindowToken(), 0);
                    }
                    eMailMessageComposing.getSupportFragmentManager().beginTransaction()
                            .remove(AttachmentMenu.this)
                            .commitNow();
                }
            };
            document.setOnClickListener(attachmentMenuClickListener);
            image.setOnClickListener(attachmentMenuClickListener);
            View audio = view.findViewById(R.id.email_message_composing_attachment_menu_audio_layout_clickable);
            audio.setOnClickListener(attachmentMenuClickListener);
        }

        public Animation onCreateAnimation(int anim, boolean enter, int animNext) {
            final int animationId;
            if (enter)
                animationId = R.anim.slide_top_bottom_fade_invisible_visible;
            else
                animationId = R.anim.slide_bottom_top_fade_visible_invisible;
            final Animation animation = AnimationUtils.loadAnimation(eMailMessageComposing, animationId);
            animation.setAnimationListener(new EMailService() {
                public void onAnimationStart(Animation animation) {
                    if (!enter)
                        parent.setBackground(null);
                }

                public void onAnimationEnd(Animation animation) {
                    if (enter)
                        parent.setBackground(background);
                }
            });
            return animation;
        }
    }

    public static class Attachment extends Fragment  {
        EMailMessageComposing eMailMessageComposing;
        Drawable icon;
        Uri content;
        String contentType;
        TextView fileName;
        ImageView addFileName;
        GestureDetectorCompat gestureDetector;

        public Attachment(EMailMessageComposing eMailMessageComposing, Drawable icon) {
            this.eMailMessageComposing = eMailMessageComposing;
            this.icon=icon;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_composing_attachment, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            ImageView icon = view.findViewById(R.id.email_message_composing_attachment);
            icon.setImageDrawable(this.icon);
            icon.setOnTouchListener(new View.OnTouchListener() {
                public boolean onTouch(View view, MotionEvent event) {
                    return gestureDetector.onTouchEvent(event);
                }
            });
            fileName = view.findViewById(R.id.email_message_composing_attachment_file_name);
            addFileName=view.findViewById(R.id.email_message_composing_attachment_add_file_name);
            View fileNameLayoutClickable = view.findViewById(R.id.email_message_composing_attachment_file_name_layout_clickable);
            fileNameLayoutClickable.setOnClickListener(new EMailService() {
                public void onClick(View view) {
                    eMailMessageComposing.changeFileName(Attachment.this);
                }
            });
            gestureDetector = new GestureDetectorCompat(getContext(), new GestureDetector.SimpleOnGestureListener() {

                public boolean onSingleTapConfirmed(MotionEvent event) {
                    System.out.println("hello");
                    Intent intent = new Intent();
                    return true;
                }

                public boolean onFling(MotionEvent firstEvent, MotionEvent secondEvent, float velocityX, float velocityY) {
                    if (velocityY <= -100) {
                        AccelerateInterpolator accelerateInterpolator = new AccelerateInterpolator();
                        view.animate()
                                .translationY(-100)
                                .setInterpolator(accelerateInterpolator)
                                .setDuration(300)
                                .start();
                        view.animate()
                                .alpha(0)
                                .setInterpolator(accelerateInterpolator)
                                .setDuration(301)
                                .setListener(new EMailService() {
                                    public void onAnimationEnd(Animator animator) {
                                        if (view.getAlpha() == 0) {
                                            eMailMessageComposing.attachments.remove(Attachment.this);
                                            final AttachmentLayout attachmentsLayout = (AttachmentLayout) view.getParent();
                                            final int attachmentsLayoutViewsCount = attachmentsLayout.getChildCount();
                                            eMailMessageComposing.getSupportFragmentManager().beginTransaction()
                                                    .remove(Attachment.this)
                                                    .commitNow();
                                            if (attachmentsLayoutViewsCount != 1) {
                                                View plugView=new View(eMailMessageComposing);
                                                plugView.setLayoutParams(view.getLayoutParams());
                                                attachmentsLayout.addView(plugView);
                                                final int removedAttachmentIndex=attachmentsLayout.indexOfChild(view);
                                                final Animation attachmentAnimation=AnimationUtils.loadAnimation(eMailMessageComposing,
                                                        R.anim.slide_right_left);
                                                for (int index=removedAttachmentIndex+1; index<attachmentsLayoutViewsCount; index++) {
                                                    View attachment=attachmentsLayout.getChildAt(index);
                                                    if (index==attachmentsLayoutViewsCount-1) {
                                                        attachmentAnimation.setAnimationListener(new EMailService() {
                                                            public void onAnimationEnd(Animation animation) {
                                                                attachmentsLayout.removeView(plugView);
                                                            }
                                                        });
                                                    }
                                                    attachment.startAnimation(attachmentAnimation);
                                                }
                                            }
                                        }
                                    }
                                })
                                .start();
                    }
                    return true;
                }
            });
        }
    }

    public static class EnteringFileName extends Fragment {
        EMailMessageComposing eMailMessageComposing;
        Attachment attachmentToEnterFileName;
        EditText enter;
        View parent;
        boolean changingFileName;

        public EnteringFileName(EMailMessageComposing eMailMessageComposing, View parent) {
            this.eMailMessageComposing = eMailMessageComposing;
            this.parent = parent;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_composing_entering_file_name, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            View eMailMessageComposingCurrentFocus = eMailMessageComposing.getCurrentFocus();
            if (eMailMessageComposingCurrentFocus != null)
                eMailMessageComposingCurrentFocus.clearFocus();
            View ok = view.findViewById(R.id.email_message_composing_entering_file_name_ok_layout_clickable);
            View cancel = view.findViewById(R.id.email_message_composing_entering_file_name_cancel_layout_clickable);
            EMailService enteringFileNameClickListener = new EMailService() {
                public void onClick(View view) {
                    final int viewId = view.getId();
                    if (viewId == ok.getId()) {
                        final String enterText=enter.getText().toString();
                        attachmentToEnterFileName.fileName.setText(enterText);
                        if (enterText.isEmpty()) {
                            if (attachmentToEnterFileName.addFileName.getVisibility()==GONE) {
                                attachmentToEnterFileName.fileName.setVisibility(GONE);
                                attachmentToEnterFileName.addFileName.setVisibility(VISIBLE);
                            }
                        } else {
                            if (attachmentToEnterFileName.fileName.getVisibility() == GONE) {
                                attachmentToEnterFileName.addFileName.setVisibility(GONE);
                                attachmentToEnterFileName.fileName.setVisibility(VISIBLE);
                            }
                        }
                    } else if (!changingFileName) {
                        attachmentToEnterFileName.fileName.setVisibility(GONE);
                        attachmentToEnterFileName.addFileName.setVisibility(VISIBLE);
                    }
                    changingFileName=false;
                    eMailMessageComposing.getSupportFragmentManager().beginTransaction()
                            .remove(EnteringFileName.this)
                            .commit();
                    View eMailMessageComposingCurrentFocus = eMailMessageComposing.getCurrentFocus();
                    if (eMailMessageComposingCurrentFocus != null)
                        eMailMessageComposingCurrentFocus.clearFocus();
                }
            };
            ok.setOnClickListener(enteringFileNameClickListener);
            cancel.setOnClickListener(enteringFileNameClickListener);
            enter = view.findViewById(R.id.email_message_composing_entering_file_name_enter);
        }


        public void onStart() {
            enter.requestFocus();
            enter.postDelayed((Runnable) () -> {
                InputMethodManager keyboard = eMailMessageComposing.getApplicationContext().getSystemService(InputMethodManager.class);
                keyboard.showSoftInput(enter, 0);
            }, 100);
            if (changingFileName) {
                enter.setText(attachmentToEnterFileName.fileName.getText().toString());
            }
            super.onStart();
        }

        public void setAttachmentToEnterFileName(Attachment attachmentIconToEnterFileName) {
            this.attachmentToEnterFileName = new WeakReference<>(attachmentIconToEnterFileName).get();
        }

        public Animation onCreateAnimation(int anim, boolean enter, int animNext) {
            return eMailMessageComposing.createPopUpWindowAnimation(enter);
        }
    }

    public static class ConfirmingSendingEmptyMessage extends Fragment {
        EMailMessageComposing eMailMessageComposing;
        View yes;
        View no;

        public ConfirmingSendingEmptyMessage(EMailMessageComposing eMailMessageComposing) {
            this.eMailMessageComposing = eMailMessageComposing;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_composing_confirming_sending_empty_message, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            yes = view.findViewById(R.id.email_message_composing_confirming_sending_empty_message_yes);
            no = view.findViewById(R.id.email_message_composing_confirming_sending_empty_message_no);
        }

        public Animation onCreateAnimation(int anim, boolean enter, int animNext) {
            return eMailMessageComposing.createPopUpWindowAnimation(enter);
        }
    }

    public static class EMailMessageSending extends Fragment {
        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_sending, container, false);
        }
    }

    public static class CcBcc extends Fragment {
        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.cc_bcc, container, false);
        }
    }
}
