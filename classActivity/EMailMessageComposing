package com.example.mailapplication;

import android.animation.Animator;
import android.animation.ValueAnimator;
import android.content.Intent;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.ConstraintSet;
import androidx.core.content.ContextCompat;
import androidx.core.view.GestureDetectorCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;

import android.database.Cursor;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.LayerDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewPropertyAnimator;

import android.view.animation.AccelerateInterpolator;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.view.ViewGroup;
import android.view.LayoutInflater;
import android.widget.ScrollView;
import android.widget.TextView;

import static android.view.View.VISIBLE;
import static android.view.View.GONE;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class EMailMessageComposing extends AppCompatActivity {
    HashMap<LayoutPart, String> recipientsLayoutParts;
    boolean modeEditLayoutPartOn;
    EMailService recipientsLayoutTextChangedListener;
    ArrayList<Attachment> attachments;
    ActivityResultLauncher<String> resultLauncher;
    View lastFocusForOnBackPressed;
    int adjustDifference;
    int subjectContentLayoutOriginY;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.email_message_composing);
        View fragmentLoadingLayout = findViewById(R.id.email_message_composing_fragment_loading_layout);
        fragmentLoadingLayout.setVisibility(GONE);
        EMailService.setCurrentActivity(this, R.id.email_message_composing_fragment_loading_layout);
        FrameLayout fromLayout = findViewById(R.id.email_message_composing_from_layout);
        String currentUserEMailAddress = EMailService.getCurrentUserEMailAddress();
        LayoutPart fromLayoutPart = new LayoutPart();
        fromLayoutPart.setLayoutPartData(currentUserEMailAddress, true, true);
        int fromLayoutId = fromLayout.getId();
        getSupportFragmentManager().beginTransaction()
                .add(fromLayoutId, fromLayoutPart)
                .commitNow();
        final LinearLayout toLayout = findViewById(R.id.email_message_composing_to_layout);
        recipientsLayoutTextChangedListener = new EMailService() {
            public void onTextChanged(CharSequence text, int start, int count, int after) {
                final int charactersCount = text.length();
                if (charactersCount > 0) {
                    char characterLast = text.charAt(charactersCount - 1);
                    final String enterEMailAddress = getString(R.string.enter_email_address);
                    if (!text.toString().equals(enterEMailAddress)) {
                        final HashMap<String, Object> recipientsLayoutData = getRecipientsLayoutData(0);
                        final RecipientsLayoutEnter currentRecipientsLayoutEnter = (RecipientsLayoutEnter) recipientsLayoutData.get("enter");
                        if (characterLast == ' ') {
                            if (charactersCount != 1) {
                                if (modeEditLayoutPartOn) {
                                    RecipientsLayoutEnter recipientsLayoutEnterCurrent = (RecipientsLayoutEnter) recipientsLayoutData.get("enter");
                                    recipientsLayoutEnterCurrent.getView().setAlpha(0);
                                    makeRecipientsLayoutPart(recipientsLayoutEnterCurrent, (String) recipientsLayoutData.get("type"));
                                    FrameLayout recipientsLayoutEnterLayout = new FrameLayout(EMailMessageComposing.this);
                                    recipientsLayoutEnterLayout.setId(View.generateViewId());
                                    RecipientsLayoutEnter recipientsLayoutEnter = new RecipientsLayoutEnter(recipientsLayoutEnterLayout, this);
                                    LinearLayout recipientsLayoutCurrent = (LinearLayout) recipientsLayoutData.get("layout");
                                    recipientsLayoutCurrent.addView(recipientsLayoutEnterLayout, 0);
                                    String recipientType = (String) recipientsLayoutData.get("type");
                                    getSupportFragmentManager().beginTransaction()
                                            .add(recipientsLayoutEnterLayout.getId(), recipientsLayoutEnter, recipientType)
                                            .commitNow();
                                    getWindow().getDecorView().postDelayed((Runnable) () -> {
                                        toggleKeyboard(recipientsLayoutEnter.enter, true);
                                        modeEditLayoutPartOn = false;
                                    }, 100);
                                } else {
                                    final String eMailAddress = currentRecipientsLayoutEnter.enter.getText().toString();
                                    final LinearLayout recipientsLayoutCurrent = (LinearLayout) recipientsLayoutData.get("layout");
                                    addRecipientsLayoutPart(recipientsLayoutCurrent, (String) recipientsLayoutData.get("type"), getEMailAddressWithNoSpace(eMailAddress),
                                            recipientsLayoutCurrent.getChildCount());
                                }
                            }
                            currentRecipientsLayoutEnter.enter.setText("");
                        }
                    }
                }
            }
        };
        final String[] replyEMailAddresses = EMailService.getReplyEMailAddresses();
        if (replyEMailAddresses != null && replyEMailAddresses.length != 0) {
            for (String replyEMailAddress : replyEMailAddresses) {
                final String correctReplyEMailAddress = replyEMailAddress.substring(replyEMailAddress.indexOf("<") + 1, replyEMailAddress.length() - 1);
                addRecipientsLayoutPart(toLayout, "To", correctReplyEMailAddress, toLayout.getChildCount());
            }
        } else {
            FrameLayout toLayoutEnterLayout = new FrameLayout(this);
            toLayoutEnterLayout.setId(View.generateViewId());
            RecipientsLayoutEnter toLayoutEnter = new RecipientsLayoutEnter(toLayoutEnterLayout, recipientsLayoutTextChangedListener);
            toLayout.addView(toLayoutEnterLayout);
            getSupportFragmentManager().beginTransaction()
                    .add(toLayoutEnterLayout.getId(), toLayoutEnter, "To")
                    .commitNow();
        }
        EditText subject = findViewById(R.id.email_message_composing_subject);
        subject.setFocusable(false);
        EditText content = findViewById(R.id.email_message_composing_content);
        content.setFocusable(false);
        ImageView back = findViewById(R.id.email_message_composing_back);
        ImageView attachmentIcon = findViewById(R.id.email_message_composing_attachment_icon);
        ImageView send = findViewById(R.id.email_message_composing_send);
        ImageView addCcBcc = findViewById(R.id.email_message_composing_add_cc_bcc);
        View subjectLayoutClickable = findViewById(R.id.email_message_composing_subject_layout_clickable);
        FrameLayout attachmentMenuLayout = findViewById(R.id.email_message_composing_attachment_menu_layout);
        attachmentMenuLayout.bringToFront();
        Drawable attachmentMenuBackground = ContextCompat.getDrawable(this, R.drawable.background_email_message_composing_attachment_menu);
        View popUpWindowLayout = findViewById(R.id.email_message_composing_pop_up_window_layout);
        popUpWindowLayout.setVisibility(GONE);
        popUpWindowLayout.setY(400);
        final GestureDetector.SimpleOnGestureListener gestureDetectorListener = new GestureDetector.SimpleOnGestureListener() {

            @Override
            public void onLongPress(MotionEvent event) {
                final View eMailMessageComposingLayoutClickable = findViewById(R.id.email_message_composing_layout_clickable);
                if (eMailMessageComposingLayoutClickable.getVisibility() == VISIBLE)
                    onSingleTapConfirmed(null);
                final View currentAttachmentsLayoutClickable = getCurrentAttachmentsLayoutClickable(event);
                final View currentAttachmentsLayoutScroll;
                final int currentAttachmentsLayoutClickableId = currentAttachmentsLayoutClickable.getId();
                if (currentAttachmentsLayoutClickableId == R.id.email_message_composing_attachment_image_layout_clickable)
                    currentAttachmentsLayoutScroll = findViewById(R.id.email_message_composing_attachment_image_layout_scroll);
                else if (currentAttachmentsLayoutClickableId == R.id.email_message_composing_attachment_document_layout_clickable)
                    currentAttachmentsLayoutScroll = findViewById(R.id.email_message_composing_attachment_document_layout_scroll);
                else if (currentAttachmentsLayoutClickableId == R.id.email_message_composing_attachment_audio_layout_clickable)
                    currentAttachmentsLayoutScroll = findViewById(R.id.email_message_composing_attachment_audio_layout_scroll);
                else
                    currentAttachmentsLayoutScroll = findViewById(R.id.email_message_composing_attachment_unknown_layout_scroll);
                final LayerDrawable currentAttachmentsLayoutScrollBackground = (LayerDrawable) currentAttachmentsLayoutScroll.getBackground().mutate();
                currentAttachmentsLayoutScroll.setBackground(currentAttachmentsLayoutScrollBackground);
                final Drawable currentAttachmentsLayoutScrollBackgroundTop = currentAttachmentsLayoutScrollBackground.findDrawableByLayerId(R.id.background_attachments_layout_top);
                final int brightGrey = getColor(R.color.bright_grey);
                final int white = getColor(R.color.white);
                final ValueAnimator attachmentsLayoutScrollBackgroundAnimator = ValueAnimator.ofArgb(white, brightGrey).setDuration(150);
                attachmentsLayoutScrollBackgroundAnimator.addUpdateListener(new EMailService() {

                    @Override
                    public void onAnimationUpdate(ValueAnimator animator) {
                        currentAttachmentsLayoutScrollBackgroundTop.setTint((int) animator.getAnimatedValue());

                    }
                });
                attachmentsLayoutScrollBackgroundAnimator.start();
                currentAttachmentsLayoutScrollBackgroundTop.setTint(brightGrey);
                currentAttachmentsLayoutClickable.setClickable(false);
                final View eMailMessageComposingScroll = findViewById(R.id.email_message_composing_scroll);
                eMailMessageComposingScroll.setOnTouchListener(new EMailService() {

                    @Override
                    public boolean onTouch(View view, MotionEvent event) {
                        final int action = event.getAction();
                        if (action == MotionEvent.ACTION_SCROLL)
                            return false;
                        return true;
                    }
                });
                eMailMessageComposingLayoutClickable.setVisibility(VISIBLE);
            }

            @Override
            public boolean onSingleTapConfirmed(MotionEvent event) {
                System.out.println("im here");
                final View eMailMessageComposingLayoutClickable = findViewById(R.id.email_message_composing_layout_clickable);
                if (eMailMessageComposingLayoutClickable.getVisibility() == VISIBLE) {
                    final View currentAttachmentsLayoutClickable;
                    final View currentAttachmentsLayoutScroll;
                    final View attachmentsImageLayoutClickable = findViewById(R.id.email_message_composing_attachment_image_layout_clickable);
                    if (!attachmentsImageLayoutClickable.isClickable()) {
                        currentAttachmentsLayoutClickable = attachmentsImageLayoutClickable;
                        currentAttachmentsLayoutScroll = findViewById(R.id.email_message_composing_attachment_image_layout_scroll);
                    } else {
                        final View attachmentsDocumentLayoutClickable = findViewById(R.id.email_message_composing_attachment_document_layout_clickable);
                        if (!attachmentsDocumentLayoutClickable.isClickable()) {
                            currentAttachmentsLayoutClickable = attachmentsDocumentLayoutClickable;
                            currentAttachmentsLayoutScroll = findViewById(R.id.email_message_composing_attachment_document_layout_scroll);
                        } else {
                            final View attachmentsAudioLayoutClickable = findViewById(R.id.email_message_composing_attachment_audio_layout_clickable);
                            if (!attachmentsAudioLayoutClickable.isClickable()) {
                                currentAttachmentsLayoutClickable = attachmentsAudioLayoutClickable;
                                currentAttachmentsLayoutScroll = findViewById(R.id.email_message_composing_attachment_audio_layout_scroll);
                            } else {
                                currentAttachmentsLayoutClickable = findViewById(R.id.email_message_composing_attachment_unknown_layout_clickable);
                                currentAttachmentsLayoutScroll = findViewById(R.id.email_message_composing_attachment_unknown_layout_scroll);
                            }
                        }
                    }
                    currentAttachmentsLayoutClickable.setClickable(true);
                    final int brightGrey = getColor(R.color.bright_grey);
                    final int white = getColor(R.color.white);
                    final ValueAnimator currentAttachmentsLayoutScrollAnimator = ValueAnimator.ofArgb(brightGrey, white).setDuration(150);
                    final LayerDrawable currentAttachmentsLayoutScrollBackground = (LayerDrawable) currentAttachmentsLayoutScroll.getBackground();
                    final Drawable currentAttachmentsLayoutScrollBackgroundTop = currentAttachmentsLayoutScrollBackground.findDrawableByLayerId(R.id.background_attachments_layout_top);
                    currentAttachmentsLayoutScrollAnimator.addUpdateListener(new EMailService() {
                        public void onAnimationUpdate(ValueAnimator animator) {
                            currentAttachmentsLayoutScrollBackgroundTop.setTint((int) animator.getAnimatedValue());
                        }
                    });
                    currentAttachmentsLayoutScrollAnimator.start();
                    final View eMailMessageComposingScroll = findViewById(R.id.email_message_composing_scroll);
                    eMailMessageComposingScroll.setOnTouchListener(null);
                    eMailMessageComposingLayoutClickable.setVisibility(GONE);
                } else {
                    final String currentContentType;
                    final View currentAttachmentsLayoutClickable = getCurrentAttachmentsLayoutClickable(event);
                    final LinearLayout currentAttachmentsLayout;
                    final int currentAttachmentsLayoutClickableId = currentAttachmentsLayoutClickable.getId();
                    if (currentAttachmentsLayoutClickableId == R.id.email_message_composing_attachment_image_layout_clickable) {
                        currentAttachmentsLayout = findViewById(R.id.email_message_composing_attachment_image_layout);
                        currentContentType = "image";
                    } else if (currentAttachmentsLayoutClickableId == R.id.email_message_composing_attachment_document_layout_clickable) {
                        currentAttachmentsLayout = findViewById(R.id.email_message_composing_attachment_document_layout);
                        currentContentType = "application";
                    } else if (currentAttachmentsLayoutClickableId == R.id.email_message_composing_attachment_audio_layout_clickable) {
                        currentAttachmentsLayout = findViewById(R.id.email_message_composing_attachment_audio_layout);
                        currentContentType = "audio";
                    } else {
                        currentAttachmentsLayout = findViewById(R.id.email_message_composing_attachment_unknown_layout);
                        currentContentType = "unknown";
                    }
                    System.out.println(currentAttachmentsLayout);
                    final float pointerX = event.getRawX();
                    final float pointerY = event.getRawY();
                    final int viewMeasurer = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
                    final int[] location = new int[2];
                    final View sampleAttachmentView = attachments.get(0).getView();
                    sampleAttachmentView.measure(viewMeasurer, viewMeasurer);
                    final int clickedAttachmentIndex = (int) (pointerX / sampleAttachmentView.getMeasuredWidth());
                    final int currentAttachmentsLayoutViewsCount = currentAttachmentsLayout.getChildCount();
                    System.out.println(currentContentType);
                    if (clickedAttachmentIndex < currentAttachmentsLayoutViewsCount) {
                        Attachment currentAttachment = null;
                        for (int index = 0, attachmentsOfCurrentContentTypeCount = 0; index < attachments.size(); index++) {
                            Attachment attachment = attachments.get(index);
                            System.out.println(attachment);
                            final StringBuilder attachmentBaseContentTypeBuilder = new StringBuilder();
                            for (char attachmentContentTypeCharacter : attachment.contentType.toCharArray()) {
                                if (attachmentContentTypeCharacter != '/')
                                    attachmentBaseContentTypeBuilder.append(attachmentContentTypeCharacter);
                                else
                                    break;
                            }
                            final String attachmentBaseContentType = attachmentBaseContentTypeBuilder.toString();
                            if (currentContentType.equals(attachmentBaseContentType)) {
                                attachmentsOfCurrentContentTypeCount++;
                                if (attachmentsOfCurrentContentTypeCount - 1 == clickedAttachmentIndex) {
                                    currentAttachment = attachment;
                                    break;
                                }
                            }
                            if (currentContentType.equals("unknown")) {
                                if (!attachmentBaseContentType.equals("image") &&
                                        !attachmentBaseContentType.equals("application") &&
                                        !attachmentBaseContentType.equals("audio")) {
                                    currentAttachment = attachment;
                                    break;
                                }
                            }
                        }
                        final View sampleAttachmentViewFileName = sampleAttachmentView.findViewById(R.id.email_message_composing_attachment_file_name_layout_clickable);
                        sampleAttachmentViewFileName.measure(viewMeasurer, viewMeasurer);
                        currentAttachmentsLayoutClickable.getLocationOnScreen(location);
                        final int sampleAttachmentViewFileNameTopY = location[1];
                        final int sampleAttachmentViewFileNameBottomY = sampleAttachmentViewFileNameTopY + sampleAttachmentViewFileName.getMeasuredHeight();
                        if (pointerY >= sampleAttachmentViewFileNameTopY && pointerY <= sampleAttachmentViewFileNameBottomY) {
                            final View currentAttachmentFileNameLayoutClickable = currentAttachment.getView().findViewById(R.id.email_message_composing_attachment_file_name_layout_clickable);
                            currentAttachmentFileNameLayoutClickable.performClick();
                        } else {
                            System.out.println("no");
                            final View currentAttachmentLayoutClickable = currentAttachment.getView().findViewById(R.id.email_message_composing_attachment_layout_clickable);
                            currentAttachmentLayoutClickable.performClick();
                        }
                    }
                }
                return true;
            }

            @Override
            public boolean onFling(MotionEvent firstEvent, MotionEvent secondEvent, float velocityX, float velocityY) {
                if (velocityY <= -100) {
                    final MotionEvent.PointerCoords pointerCoords = new MotionEvent.PointerCoords();
                    firstEvent.getPointerCoords(0, pointerCoords);
                    final int[] location = new int[2];
                    final View eMailMessageComposingSubjectContentLayout = findViewById(R.id.email_message_composing_subject_content_layout);
                    eMailMessageComposingSubjectContentLayout.getLocationOnScreen(location);
                    final int eMailMessageComposingSubjectContentLayoutTopY = location[1];
                    if (pointerCoords.y > eMailMessageComposingSubjectContentLayoutTopY) {
                        final View currentAttachmentsLayoutClickable = getCurrentAttachmentsLayoutClickable(firstEvent);
                        final int currentAttachmentsLayoutClickableId = currentAttachmentsLayoutClickable.getId();
                        final AttachmentLayout currentAttachmentsLayout;
                        final String currentContentType;
                        if (currentAttachmentsLayoutClickableId == R.id.email_message_composing_attachment_image_layout_clickable) {
                            currentAttachmentsLayout = findViewById(R.id.email_message_composing_attachment_image_layout);
                            currentContentType = "image";
                        } else if (currentAttachmentsLayoutClickableId == R.id.email_message_composing_attachment_document_layout_clickable) {
                            currentAttachmentsLayout = findViewById(R.id.email_message_composing_attachment_document_layout);
                            currentContentType = "application";
                        } else if (currentAttachmentsLayoutClickableId == R.id.email_message_composing_attachment_audio_layout_clickable) {
                            currentAttachmentsLayout = findViewById(R.id.email_message_composing_attachment_audio_layout);
                            currentContentType = "audio";
                        } else {
                            currentAttachmentsLayout = findViewById(R.id.email_message_composing_attachment_unknown_layout);
                            currentContentType = "unknown";
                        }
                        System.out.println(currentAttachmentsLayout);
                        currentAttachmentsLayout.getLocationOnScreen(location);
                        final int currentAttachmentsLayoutTopY = location[1];
                        final int viewMeasurer = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
                        currentAttachmentsLayout.measure(viewMeasurer, viewMeasurer);
                        final int currentAttachmentsLayoutBottomY = currentAttachmentsLayoutTopY + currentAttachmentsLayout.getMeasuredHeight();
                        if (pointerCoords.y > currentAttachmentsLayoutTopY && pointerCoords.y <= currentAttachmentsLayoutBottomY) {
                            final View sampleAttachmentView = attachments.get(0).getView();
                            sampleAttachmentView.measure(viewMeasurer, viewMeasurer);
                            final int removedAttachmentIndex = (int) (pointerCoords.x / sampleAttachmentView.getMeasuredWidth());
                            final int currentAttachmentsLayoutViewsCount = currentAttachmentsLayout.getChildCount();
                            if (removedAttachmentIndex < currentAttachmentsLayoutViewsCount) {
                                for (int index = 0, currentContentTypeAttachmentCount = 0; index < attachments.size(); index++) {
                                    final Attachment attachment = attachments.get(index);
                                    final StringBuilder attachmentBaseContentTypeBuilder = new StringBuilder();
                                    for (char attachmentContentTypeCharacter : attachment.contentType.toCharArray()) {
                                        if (attachmentContentTypeCharacter != '/')
                                            attachmentBaseContentTypeBuilder.append(attachmentContentTypeCharacter);
                                        else
                                            break;
                                    }
                                    final String attachmentBaseContentType = attachmentBaseContentTypeBuilder.toString();
                                    if (currentContentType.equals(attachmentBaseContentType)) {
                                        currentContentTypeAttachmentCount++;
                                    } else if (currentContentType.equals("unknown")) {
                                        if (!attachmentBaseContentType.equals("image") &&
                                                !attachmentBaseContentType.equals("application") &&
                                                !attachmentBaseContentType.equals("audio")) {
                                            currentContentTypeAttachmentCount++;
                                        }
                                    }
                                    if (currentContentTypeAttachmentCount - 1 == removedAttachmentIndex) {
                                        attachments.remove(attachment);
                                        final View removedAttachmentView = attachment.getView();
                                        AccelerateInterpolator accelerateInterpolator = new AccelerateInterpolator();
                                        removedAttachmentView.animate()
                                                .translationY(-100)
                                                .setInterpolator(accelerateInterpolator)
                                                .setDuration(300)
                                                .start();
                                        removedAttachmentView.animate()
                                                .alpha(0)
                                                .setInterpolator(accelerateInterpolator)
                                                .setDuration(301)
                                                .setListener(new EMailService() {
                                                    final Attachment removedAttachment = new WeakReference<>(attachment).get();
                                                    final View attachmentView = new WeakReference<>(removedAttachmentView).get();
                                                    final AttachmentLayout attachmentsLayout = new WeakReference<>(currentAttachmentsLayout).get();
                                                    final View attachmentsLayoutClickable = new WeakReference<>(currentAttachmentsLayoutClickable).get();

                                                    @Override
                                                    public void onAnimationEnd(Animator animator) {
                                                        if (attachmentView.getAlpha() == 0) {
                                                            final int currentAttachmentsLayoutViewsCount = attachmentsLayout.getChildCount();
                                                            final int removedAttachmentIndex = attachmentsLayout.indexOfChild(attachmentView);
                                                            if (currentAttachmentsLayoutViewsCount != 1) {
                                                                getSupportFragmentManager().beginTransaction()
                                                                        .remove(removedAttachment)
                                                                        .commitNow();
                                                                View plugView = new View(EMailMessageComposing.this);
                                                                final int viewMeasurer = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
                                                                attachmentView.measure(viewMeasurer, viewMeasurer);
                                                                plugView.setLayoutParams(new LinearLayout.LayoutParams(attachmentView.getMeasuredWidth(), attachmentView.getMeasuredHeight()));
                                                                attachmentsLayout.addView(plugView);
                                                                final Animation attachmentAnimation = AnimationUtils.loadAnimation(EMailMessageComposing.this,
                                                                        R.anim.slide_right_left);
                                                                for (int index = removedAttachmentIndex; index < currentAttachmentsLayoutViewsCount; index++) {
                                                                    View attachment = attachmentsLayout.getChildAt(index);
                                                                    if (index == currentAttachmentsLayoutViewsCount - 1) {
                                                                        attachmentAnimation.setAnimationListener(new EMailService() {
                                                                            public void onAnimationEnd(Animation animation) {
                                                                                attachmentsLayout.removeView(plugView);
                                                                            }
                                                                        });
                                                                    }
                                                                    attachment.startAnimation(attachmentAnimation);
                                                                }
                                                            } else {
                                                                final int brightGrey = getColor(R.color.bright_grey);
                                                                final int white = getColor(R.color.white);
                                                                final View attachmentsLayoutScroll = (View) attachmentsLayout.getParent();
                                                                final ValueAnimator attachmentsLayoutScrollAnimator = ValueAnimator.ofArgb(brightGrey, white);
                                                                final LayerDrawable attachmentsLayoutScrollBackground = (LayerDrawable) attachmentsLayoutScroll.getBackground().mutate();
                                                                attachmentsLayoutScroll.setBackground(attachmentsLayoutScrollBackground);
                                                                final Drawable attachmentsLayoutScrollBackgroundStoke = attachmentsLayoutScrollBackground.findDrawableByLayerId(R.id.background_attachments_layout_stroke);
                                                                final int transparent = getColor(R.color.transparent);
                                                                attachmentsLayoutScrollBackgroundStoke.setTint(transparent);
                                                                final Drawable attachmentsLayoutScrollBackgroundTop = attachmentsLayoutScrollBackground.findDrawableByLayerId(R.id.background_attachments_layout_top);
                                                                attachmentsLayoutScrollAnimator.addUpdateListener(new EMailService() {
                                                                    public void onAnimationUpdate(ValueAnimator animator) {
                                                                        attachmentsLayoutScrollBackgroundTop.setTint((int) animator.getAnimatedValue());
                                                                    }
                                                                });
                                                                attachmentsLayoutScrollAnimator.addListener(new EMailService() {
                                                                    public void onAnimationEnd(Animator animator) {
                                                                        final AttachmentLayout eMailMessageComposingContentLayout = findViewById(R.id.email_message_composing_content_layout);
                                                                        final int currentAttachmentsLayoutIndex = eMailMessageComposingContentLayout.indexOfChild((View) attachmentsLayout.getParent().getParent());
                                                                        final Animation attachmentsLayoutAnimation = AnimationUtils.loadAnimation(EMailMessageComposing.this,
                                                                                R.anim.slide_bottom_top);
                                                                        final FrameLayout plugView = new FrameLayout(EMailMessageComposing.this);
                                                                        final int viewMeasurer = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
                                                                        final View sampleAttachmentsLayoutScroll = (View) attachmentsLayout.getParent();
                                                                        sampleAttachmentsLayoutScroll.measure(viewMeasurer, viewMeasurer);
                                                                        plugView.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, sampleAttachmentsLayoutScroll.getMeasuredHeight()));
                                                                        eMailMessageComposingContentLayout.addView(plugView);
                                                                        getSupportFragmentManager().beginTransaction()
                                                                                .remove(removedAttachment)
                                                                                .commitNow();
                                                                        attachmentsLayoutClickable.setVisibility(GONE);
                                                                        final int eMailMessageComposingContentLayoutViewsCount = eMailMessageComposingContentLayout.getChildCount();
                                                                        for (int index = currentAttachmentsLayoutIndex + 1; index < eMailMessageComposingContentLayoutViewsCount; index++) {
                                                                            if (index == eMailMessageComposingContentLayoutViewsCount - 1) {
                                                                                attachmentsLayoutAnimation.setAnimationListener(new EMailService() {
                                                                                    final View view = new WeakReference<>(plugView).get();

                                                                                    public void onAnimationEnd(Animation animation) {
                                                                                        final LinearLayout eMailMessageComposingContentLayout = findViewById(R.id.email_message_composing_content_layout);
                                                                                        eMailMessageComposingContentLayout.removeView(view);
                                                                                    }
                                                                                });
                                                                                plugView.startAnimation(attachmentsLayoutAnimation);
                                                                                break;
                                                                            }
                                                                            final FrameLayout attachmentsLayoutFrame = (FrameLayout) eMailMessageComposingContentLayout.getChildAt(index);
                                                                            final HorizontalScrollView attachmentsLayoutScroll = (HorizontalScrollView) attachmentsLayoutFrame.getChildAt(0);
                                                                            final LinearLayout attachmentsLayout = (LinearLayout) attachmentsLayoutScroll.getChildAt(0);
                                                                            final int attachmentsLayoutViewsCount = attachmentsLayout.getChildCount();
                                                                            if (attachmentsLayoutViewsCount > 0)
                                                                                attachmentsLayoutFrame.startAnimation(attachmentsLayoutAnimation);
                                                                        }
                                                                        attachmentsLayoutClickable.setClickable(true);
                                                                        final ScrollView eMailMessageComposingScroll = findViewById(R.id.email_message_composing_scroll);
                                                                        eMailMessageComposingScroll.setOnTouchListener(null);
                                                                    }
                                                                });
                                                                final View eMailMessageComposingLayoutClickable = findViewById(R.id.email_message_composing_layout_clickable);
                                                                eMailMessageComposingLayoutClickable.setVisibility(GONE);
                                                                attachmentsLayoutScrollAnimator.start();
                                                            }
                                                        }
                                                    }
                                                })
                                                .start();
                                    }
                                }
                            }
                        }
                    }
                }
                return true;
            }

            @Override
            public boolean onScroll(MotionEvent firstEvent, MotionEvent secondEvent, float distanceX, float distanceY) {
                final View currentAttachmentsLayoutClickable = getCurrentAttachmentsLayoutClickable(firstEvent);
                final int currentAttachmentsLayoutClickableId = currentAttachmentsLayoutClickable.getId();
                final HorizontalScrollView currentAttachmentsLayoutScroll;
                if (currentAttachmentsLayoutClickableId == R.id.email_message_composing_attachment_image_layout_clickable)
                    currentAttachmentsLayoutScroll = findViewById(R.id.email_message_composing_attachment_image_layout_scroll);
                else if (currentAttachmentsLayoutClickableId == R.id.email_message_composing_attachment_document_layout_clickable)
                    currentAttachmentsLayoutScroll = findViewById(R.id.email_message_composing_attachment_document_layout_scroll);
                else if (currentAttachmentsLayoutClickableId == R.id.email_message_composing_attachment_audio_layout_clickable)
                    currentAttachmentsLayoutScroll = findViewById(R.id.email_message_composing_attachment_audio_layout_scroll);
                else
                    currentAttachmentsLayoutScroll = findViewById(R.id.email_message_composing_attachment_unknown_layout_scroll);
                currentAttachmentsLayoutScroll.smoothScrollTo(currentAttachmentsLayoutScroll.getScrollX() + (int) distanceX, 0);
                return true;
            }
        };
        EMailService eMailMessageComposingClickListener = new EMailService() {
            boolean attachmentMenuShown;
            boolean ccBccShown;

            public void onClick(View view) {
                final int viewId = view.getId();
                if (viewId == back.getId()) {
                    Intent intent = new Intent(EMailMessageComposing.this, MenuMain.class);
                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
                    startActivity(intent);
                } else if (viewId == addCcBcc.getId()) {
                    addCcBcc.setClickable(false);
                    final FragmentManager fragmentManager = getSupportFragmentManager();
                    final View subjectContentLayout = findViewById(R.id.email_message_composing_subject_content_layout);
                    final ConstraintLayout scrollLayout = findViewById(R.id.email_message_composing_scroll_layout_constraint);
                    final ConstraintSet scrollLayoutConstraintSet = new ConstraintSet();
                    if (!ccBccShown) {
                        View ccBccLayoutConstraint = findViewById(R.id.email_message_composing_cc_bcc_layout_constraint);
                        ccBccLayoutConstraint.setVisibility(VISIBLE);
                        final CcBcc ccBcc = new CcBcc();
                        final FrameLayout ccBccLayout = findViewById(R.id.email_message_composing_cc_bcc_layout);
                        getSupportFragmentManager().beginTransaction()
                                .add(ccBccLayout.getId(), ccBcc, "ccBcc")
                                .commitNow();
                        final View ccBccView = ccBcc.getView();
                        View bccLayoutClickable = ccBccView.findViewById(R.id.email_message_composing_bcc_layout_clickable);
                        bccLayoutClickable.setOnClickListener(this);
                        View ccLayoutClickable = ccBccView.findViewById(R.id.email_message_composing_cc_layout_clickable);
                        ccLayoutClickable.setOnClickListener(this);
                        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                        LinearLayout bccLayout = ccBccView.findViewById(R.id.email_message_composing_bcc_layout);
                        FrameLayout bccLayoutEnterLayout = new FrameLayout(EMailMessageComposing.this);
                        bccLayoutEnterLayout.setId(View.generateViewId());
                        bccLayout.addView(bccLayoutEnterLayout);
                        RecipientsLayoutEnter bccLayoutEnter = new RecipientsLayoutEnter(bccLayoutEnterLayout,
                                recipientsLayoutTextChangedListener);
                        fragmentTransaction.add(bccLayoutEnterLayout.getId(), bccLayoutEnter, "Bcc");
                        LinearLayout ccLayout = ccBccView.findViewById(R.id.email_message_composing_cc_layout);
                        FrameLayout ccLayoutEnterLayout = new FrameLayout(EMailMessageComposing.this);
                        ccLayoutEnterLayout.setId(View.generateViewId());
                        ccLayout.addView(ccLayoutEnterLayout);
                        RecipientsLayoutEnter ccLayoutEnter = new RecipientsLayoutEnter(ccLayoutEnterLayout,
                                recipientsLayoutTextChangedListener);
                        fragmentTransaction.add(ccLayoutEnterLayout.getId(), ccLayoutEnter, "Cc").commitNow();
                        bccLayoutEnter.enter.setFocusable(false);
                        ccLayoutEnter.enter.setFocusable(false);
                        EMailService ccBccHierarchyChangeListener = new EMailService() {
                            @Override
                            public void onChildViewAdded(View parent, View child) {
                                // postDelayed method is needed here as without it parentPreviousHeight
                                // and parentCurrentHeight variables may be equal what isn't correct and breaks the logic
                                parent.postDelayed((Runnable) () -> {
                                    final int parentPreviousHeight = parent.getLayoutParams().height;
                                    final int viewMeasurer = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
                                    parent.measure(viewMeasurer, viewMeasurer);
                                    final int parentCurrentHeight = parent.getMeasuredHeight();
                                    final int parentHeightDifference = parentCurrentHeight - parentPreviousHeight;
                                    Fragment ccBcc = getSupportFragmentManager().findFragmentByTag("ccBcc");
                                    final View ccBccView = ccBcc.getView();
                                    ccBccView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
                                            ccBccView.getLayoutParams().height + parentHeightDifference));
                                    final View layoutClickable;
                                    if (parent.getId() == R.id.email_message_composing_bcc_layout)
                                        layoutClickable = ccBccView.findViewById(R.id.email_message_composing_bcc_layout_clickable);
                                    else
                                        layoutClickable = ccBccView.findViewById(R.id.email_message_composing_cc_layout_clickable);
                                    layoutClickable.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
                                            layoutClickable.getLayoutParams().height + parentHeightDifference));
                                    FrameLayout.LayoutParams parentLayoutParams = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
                                            parentCurrentHeight);
                                    parentLayoutParams.setMargins(20, 15, 20, 15);
                                    parent.setLayoutParams(parentLayoutParams);
                                    child.measure(viewMeasurer, viewMeasurer);
                                    final View ccBccLayout = findViewById(R.id.email_message_composing_cc_bcc_layout);
                                    ConstraintLayout.LayoutParams ccBccLayoutParams = (ConstraintLayout.LayoutParams) ccBccLayout.getLayoutParams();
                                    ccBccLayoutParams.height = ccBccLayoutParams.height + parentHeightDifference;
                                    final View ccBccLayoutConstraint = findViewById(R.id.email_message_composing_cc_bcc_layout_constraint);
                                    ccBccLayoutParams = (ConstraintLayout.LayoutParams) ccBccLayoutConstraint.getLayoutParams();
                                    ccBccLayoutParams.height = ccBccLayoutParams.height + parentHeightDifference;
                                }, 5);
                            }

                            @Override
                            public void onChildViewRemoved(View parent, View child) {
                                parent.postDelayed((Runnable) () -> {
                                    final int childHeight = child.getMeasuredHeight();
                                    final Fragment ccBcc = getSupportFragmentManager().findFragmentByTag("ccBcc");
                                    final View ccBccView = ccBcc.getView();
                                    final View layoutClickable;
                                    final int parentId = parent.getId();
                                    if (parentId == R.id.email_message_composing_bcc_layout)
                                        layoutClickable = ccBccView.findViewById(R.id.email_message_composing_bcc_layout_clickable);
                                    else
                                        layoutClickable = ccBccView.findViewById(R.id.email_message_composing_cc_layout_clickable);
                                    layoutClickable.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
                                            layoutClickable.getLayoutParams().height - childHeight));
                                    FrameLayout.LayoutParams parentLayoutParams = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
                                            parent.getLayoutParams().height - childHeight);
                                    parentLayoutParams.setMargins(20, 15, 20, 15);
                                    parent.setLayoutParams(parentLayoutParams);
                                    final View ccBccLayout = findViewById(R.id.email_message_composing_cc_bcc_layout);
                                    ConstraintLayout.LayoutParams ccBccLayoutParams = (ConstraintLayout.LayoutParams) ccBccLayout.getLayoutParams();
                                    ccBccLayoutParams.height = ccBccLayoutParams.height - childHeight;
                                    final View ccBccLayoutConstraint = findViewById(R.id.email_message_composing_cc_bcc_layout_constraint);
                                    ccBccLayoutParams = (ConstraintLayout.LayoutParams) ccBccLayoutConstraint.getLayoutParams();
                                    ccBccLayoutParams.height = ccBccLayoutParams.height - childHeight;
                                }, 5);
                            }
                        };
                        ccLayout.setOnHierarchyChangeListener(ccBccHierarchyChangeListener);
                        bccLayout.setOnHierarchyChangeListener(ccBccHierarchyChangeListener);
                        final int viewMeasurer = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
                        ccLayout.measure(viewMeasurer, viewMeasurer);
                        FrameLayout.LayoutParams ccBccLayoutsLayoutParams = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
                                ccLayout.getMeasuredHeight());
                        ccBccLayoutsLayoutParams.setMargins(20, 15, 20, 15);
                        ccLayout.setLayoutParams(ccBccLayoutsLayoutParams);
                        bccLayout.setLayoutParams(ccBccLayoutsLayoutParams);
                        ccBccLayout.measure(viewMeasurer, viewMeasurer);
                        final int ccBccLayoutHeight = ccBccLayout.getMeasuredHeight();
                        ccBccLayout.getLayoutParams().height = ccBccLayout.getMeasuredHeight();
                        ccBccLayoutConstraint.getLayoutParams().height = ccBccLayoutHeight;
                        ccBccView.measure(viewMeasurer, viewMeasurer);
                        ccBccView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
                                ccBccView.getMeasuredHeight()));
                        bccLayoutClickable.measure(viewMeasurer, viewMeasurer);
                        FrameLayout.LayoutParams ccBccLayoutClickableLayoutParams = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
                                bccLayoutClickable.getMeasuredHeight());
                        bccLayoutClickable.setLayoutParams(ccBccLayoutClickableLayoutParams);
                        ccLayoutClickable.setLayoutParams(ccBccLayoutClickableLayoutParams);
                        final ViewPropertyAnimator subjectContentLayoutAnimator = subjectContentLayout.animate();
                        // such weird animation duration numbers are needed to be able to create only one instance of AnimatorListener
                        boolean ccBccShownFirstTime = subjectContentLayoutAnimator.getDuration() == 300;
                        if (ccBccShownFirstTime) {
                            final int[] location = new int[2];
                            subjectContentLayout.getLocationOnScreen(location);
                            subjectContentLayoutOriginY = location[1];
                            subjectContentLayoutAnimator.setListener(new EMailService() {

                                public void onAnimationEnd(Animator animator) {
                                    final float duration = animator.getDuration();
                                    if (duration == 302) {
                                        final FragmentManager fragmentManager = getSupportFragmentManager();
                                        final Fragment ccBcc = fragmentManager.findFragmentByTag("ccBcc");
                                        fragmentManager.beginTransaction()
                                                .remove(ccBcc)
                                                .commitNow();
                                        final View ccBccLayoutConstraint = findViewById(R.id.email_message_composing_cc_bcc_layout_constraint);
                                        ccBccLayoutConstraint.setVisibility(GONE);
                                        ccBccShown = false;
                                    } else
                                        ccBccShown = true;
                                    addCcBcc.setClickable(true);
                                }
                            });
                        }
                        scrollLayoutConstraintSet.clone(scrollLayout);
                        scrollLayoutConstraintSet.connect(R.id.email_message_composing_subject_content_layout, ConstraintSet.TOP,
                                R.id.email_message_composing_cc_bcc_layout_constraint, ConstraintSet.BOTTOM);
                        scrollLayoutConstraintSet.applyTo(scrollLayout);
                        final int[] location = new int[2];
                        subjectContentLayout.getLocationOnScreen(location);
                        final int subjectContentLayoutCurrentY = location[1];
                        subjectContentLayout.setY(subjectContentLayoutCurrentY - subjectContentLayoutOriginY);
                        subjectContentLayoutAnimator
                                .translationY(-15)
                                .setDuration(301)
                                .start();
                    } else {
                        scrollLayoutConstraintSet.clone(scrollLayout);
                        scrollLayoutConstraintSet.connect(R.id.email_message_composing_subject_content_layout, ConstraintSet.TOP,
                                R.id.email_message_composing_from_to_layout_constraint, ConstraintSet.BOTTOM);
                        scrollLayoutConstraintSet.applyTo(scrollLayout);
                        final View ccBccView = getSupportFragmentManager().findFragmentByTag("ccBcc").getView();
                        subjectContentLayout.setY(subjectContentLayout.getY() + ccBccView.getLayoutParams().height);
                        subjectContentLayout.animate()
                                .translationY(0)
                                .setDuration(302)
                                .start();
                    }
                } else if (viewId == attachmentIcon.getId()) {
                    if (!attachmentMenuShown) {
                        AttachmentMenu attachmentMenu = new AttachmentMenu(EMailMessageComposing.this,
                                attachmentMenuLayout,
                                attachmentMenuBackground);
                        attachmentMenuShown = true;
                        getSupportFragmentManager().beginTransaction()
                                .add(attachmentMenuLayout.getId(), attachmentMenu, "attachment menu")
                                .commitNow();
                        final View eMailMessageComposingLayoutClickable = findViewById(R.id.email_message_composing_layout_clickable);
                        if (eMailMessageComposingLayoutClickable.getVisibility() == VISIBLE)
                            gestureDetectorListener.onSingleTapConfirmed(null);
                    } else {
                        attachmentMenuShown = false;
                        FragmentManager fragmentManager = getSupportFragmentManager();
                        Fragment attachmentMenu = fragmentManager.findFragmentByTag("attachment menu");
                        if (attachmentMenu != null) {
                            fragmentManager.beginTransaction()
                                    .remove(attachmentMenu)
                                    .commit();
                        } else {
                            attachmentMenuShown = false;
                            attachmentIcon.performClick();
                        }
                    }
                } else if (viewId == send.getId()) {
                    final View currentFocus = getCurrentFocus();
                    if (currentFocus != null) {
                        InputMethodManager keyboard = getApplicationContext().getSystemService(InputMethodManager.class);
                        keyboard.hideSoftInputFromWindow(currentFocus.getWindowToken(), 0);
                        makeCurrentFocusLayoutClickableVisible(currentFocus);
                    }
                    final int toLayoutViewsCount = toLayout.getChildCount();
                    if (toLayoutViewsCount == 1) {
                        RecipientsLayoutEnter toLayoutEnter = (RecipientsLayoutEnter) getSupportFragmentManager().findFragmentByTag("To");
                        if (toLayoutEnter != null) {
                            final String enterEMailAddress = getString(R.string.enter_email_address);
                            if (toLayoutEnter.enter.getText().toString().isEmpty()) {
                                int red = getColor(R.color.red);
                                toLayoutEnter.enter.setTextColor(red);
                                toLayoutEnter.enter.setText(enterEMailAddress);
                                return;
                            } else if (!toLayoutEnter.enter.getText().toString().equals(enterEMailAddress)) {
                                makeRecipientsLayoutPart(toLayoutEnter, "To");
                            } else {
                                send.setClickable(false);
                                ValueAnimator toLayoutEnterAnimator = ValueAnimator.ofFloat(0, 5).setDuration(200);
                                final int red = getColor(R.color.red);
                                toLayoutEnterAnimator.addUpdateListener(new EMailService() {
                                    public void onAnimationUpdate(ValueAnimator animator) {
                                        toLayoutEnter.enter.setShadowLayer((float) animator.getAnimatedValue(), 1, 1, red);
                                    }
                                });
                                toLayoutEnterAnimator.addListener(new EMailService() {
                                    public void onAnimationEnd(Animator animator) {
                                        toLayoutEnterAnimator.setFloatValues(5, 0);
                                        toLayoutEnterAnimator.removeAllListeners();
                                        toLayoutEnterAnimator.addListener(new EMailService() {
                                            public void onAnimationEnd(Animator animator) {
                                                send.setClickable(true);
                                            }
                                        });
                                        toLayoutEnterAnimator.start();
                                    }
                                });
                                toLayoutEnterAnimator.start();
                                return;
                            }
                        }
                    }
                    boolean canSend = true;
                    for (Map.Entry<LayoutPart, String> recipientTypeAndLayoutPart : recipientsLayoutParts.entrySet()) {
                        LayoutPart recipientsLayoutPart = recipientTypeAndLayoutPart.getKey();
                        if (!recipientsLayoutPart.eMailAddressValid) {
                            canSend = false;
                            break;
                        }
                    }
                    if (!canSend)
                        return;
                    if (content.getText().toString().isEmpty()) {
                        send.setClickable(false);
                        final ConfirmingSendingEmptyMessage confirmingSendingEmptyMessage = new ConfirmingSendingEmptyMessage
                                (EMailMessageComposing.this);
                        popUpWindowLayout.setVisibility(VISIBLE);
                        getSupportFragmentManager().beginTransaction()
                                .add(popUpWindowLayout.getId(), confirmingSendingEmptyMessage, "confirming sending empty message")
                                .commitNow();
                        EMailService confirmingSendingEmptyMessageClickListener = new EMailService() {
                            public void onClick(View view) {
                                final int viewId = view.getId();
                                getSupportFragmentManager().beginTransaction()
                                        .remove(confirmingSendingEmptyMessage)
                                        .commitNow();
                                if (viewId == confirmingSendingEmptyMessage.yes.getId())
                                    sendEMailMessage(recipientsLayoutParts, subject, content, attachments);
                            }
                        };
                        confirmingSendingEmptyMessage.yes.setOnClickListener(confirmingSendingEmptyMessageClickListener);
                        confirmingSendingEmptyMessage.no.setOnClickListener(confirmingSendingEmptyMessageClickListener);
                    } else
                        EMailService.sendEMailMessage(recipientsLayoutParts, subject, content, attachments);
                } else if (viewId == R.id.email_message_composing_to_layout_clickable ||
                        viewId == R.id.email_message_composing_bcc_layout_clickable ||
                        viewId == R.id.email_message_composing_cc_layout_clickable) {
                    final View currentFocus = getCurrentFocus();
                    if (currentFocus != null) {
                        makeCurrentFocusLayoutClickableVisible(currentFocus);
                        currentFocus.clearFocus();
                    }
                    subject.setFocusable(false);
                    content.setFocusable(false);
                    final HashMap<String, Object> recipientsLayoutData = getRecipientsLayoutData(viewId);
                    RecipientsLayoutEnter currentRecipientsLayoutEnter = (RecipientsLayoutEnter) recipientsLayoutData.get("enter");
                    if (currentRecipientsLayoutEnter != null) {
                        // only toLayout enter fragment can have text, which is "please, enter EMailAddress", not having got a focus before,
                        // so we can be sure which fragment is current basing on its content
                        final String currentRecipientsLayoutEnterText = currentRecipientsLayoutEnter.enter.getText().toString();
                        if (!currentRecipientsLayoutEnterText.isEmpty()) {
                            currentRecipientsLayoutEnter.enter.setText("");
                            int black = getColor(R.color.black);
                            currentRecipientsLayoutEnter.enter.setTextColor(black);
                        }
                    } else {
                        FrameLayout recipientsLayoutEnterLayout = new FrameLayout(EMailMessageComposing.this);
                        recipientsLayoutEnterLayout.setId(View.generateViewId());
                        final LinearLayout currentRecipientsLayout = (LinearLayout) recipientsLayoutData.get("layout");
                        currentRecipientsLayout.addView(recipientsLayoutEnterLayout, 0);
                        currentRecipientsLayoutEnter = new RecipientsLayoutEnter(recipientsLayoutEnterLayout, recipientsLayoutTextChangedListener);
                        final String recipientType = (String) recipientsLayoutData.get("type");
                        getSupportFragmentManager().beginTransaction()
                                .add(recipientsLayoutEnterLayout.getId(), currentRecipientsLayoutEnter, recipientType)
                                .commitNow();
                    }
                    currentRecipientsLayoutEnter.enter.setFocusableInTouchMode(true);
                    currentRecipientsLayoutEnter.enter.setFocusable(true);
                    toggleKeyboard(currentRecipientsLayoutEnter.enter, true);
                    final View currentRecipientsLayoutClickable = (View) recipientsLayoutData.get("layout clickable");
                    currentRecipientsLayoutClickable.setVisibility(GONE);
                } else {
                    final View currentFocus = getCurrentFocus();
                    if (currentFocus != null)
                        makeCurrentFocusLayoutClickableVisible(currentFocus);
                    final View viewToShowKeyboard;
                    if (viewId == R.id.email_message_composing_content_layout_clickable_all ||
                            viewId == R.id.email_message_composing_content_layout_clickable_text) {
                        content.setFocusableInTouchMode(true);
                        content.setFocusable(true);
                        content.requestFocus();
                        viewToShowKeyboard = content;
                    } else {
                        subject.setFocusableInTouchMode(true);
                        subject.setFocusable(true);
                        subject.requestFocus();
                        viewToShowKeyboard = subject;
                    }
                    toggleKeyboard(viewToShowKeyboard, true);
                }
            }
        };
        View toLayoutClickable = findViewById(R.id.email_message_composing_to_layout_clickable);
        toLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        back.setOnClickListener(eMailMessageComposingClickListener);
        addCcBcc.setOnClickListener(eMailMessageComposingClickListener);
        attachmentIcon.setOnClickListener(eMailMessageComposingClickListener);
        send.setOnClickListener(eMailMessageComposingClickListener);
        subjectLayoutClickable.setOnClickListener(eMailMessageComposingClickListener);
        subjectLayoutClickable.bringToFront();
        View shadow = findViewById(R.id.email_message_composing_shadow);
        shadow.bringToFront();
        resultLauncher = registerForActivityResult(new ActivityResultContracts.GetMultipleContents(),
                (uriList) -> {
                    if (!uriList.isEmpty()) {
                        for (Uri uri : uriList) {
                            InputMethodManager keyboard = getApplicationContext().getSystemService(InputMethodManager.class);
                            keyboard.showSoftInput(content, InputMethodManager.SHOW_FORCED);
                            Cursor cursor = getContentResolver().query(uri, null, null, null, null);
                            cursor.moveToFirst();
                            String contentType = cursor.getString(cursor.getColumnIndex(MediaStore.Files.FileColumns.MIME_TYPE));
                            final AttachmentLayout attachmentsLayout;
                            final View attachmentsLayoutClickable;
                            final Drawable icon;
                            if (contentType.startsWith("image/")) {
                                attachmentsLayout = findViewById(R.id.email_message_composing_attachment_image_layout);
                                attachmentsLayoutClickable = findViewById(R.id.email_message_composing_attachment_image_layout_clickable);
                                final Drawable imageIcon = ContextCompat.getDrawable(EMailMessageComposing.this, R.drawable.attachment_image);
                                icon = imageIcon;
                            } else if (contentType.startsWith("application/")) {
                                attachmentsLayout = findViewById(R.id.email_message_composing_attachment_document_layout);
                                attachmentsLayoutClickable = findViewById(R.id.email_message_composing_attachment_document_layout_clickable);
                                final Drawable documentIcon = ContextCompat.getDrawable(EMailMessageComposing.this, R.drawable.attachment_document);
                                icon = documentIcon;
                            } else if (contentType.startsWith("audio/")) {
                                attachmentsLayout = findViewById(R.id.email_message_composing_attachment_audio_layout);
                                attachmentsLayoutClickable = findViewById(R.id.email_message_composing_attachment_audio_layout_clickable);
                                final Drawable audioIcon = ContextCompat.getDrawable(EMailMessageComposing.this, R.drawable.attachment_audio);
                                icon = audioIcon;
                            } else {
                                attachmentsLayout = findViewById(R.id.email_message_composing_attachment_unknown_layout);
                                attachmentsLayoutClickable = findViewById(R.id.email_message_composing_attachment_unknown_layout_clickable);
                                final Drawable unknownIcon = ContextCompat.getDrawable(EMailMessageComposing.this, R.drawable.attachment_unknown);
                                icon = unknownIcon;
                            }
                            final View attachmentsLayoutScroll = (View) attachmentsLayout.getParent();
                            final Drawable attachmentsLayoutScrollBackground = ContextCompat.getDrawable(EMailMessageComposing.this, R.drawable.background_attachment_layout);
                            attachmentsLayoutScroll.setBackground(attachmentsLayoutScrollBackground);
                            final EnteringFileName enteringFileName = new EnteringFileName(EMailMessageComposing.this, popUpWindowLayout);
                            final Attachment attachment = new Attachment(EMailMessageComposing.this, icon);
                            enteringFileName.setAttachmentToEnterFileName(attachment);
                            final View eMailMessageComposingCurrentFocus = getCurrentFocus();
                            if (eMailMessageComposingCurrentFocus != null)
                                eMailMessageComposingCurrentFocus.clearFocus();
                            popUpWindowLayout.setVisibility(VISIBLE);
                            final FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();
                            fragmentTransaction.add(attachmentsLayout.getId(), attachment);
                            if (uriList.size() == 1) {
                                fragmentTransaction.add(popUpWindowLayout.getId(), enteringFileName, "entering file name");
                            }
                            fragmentTransaction.commitNow();
                            final int viewMeasurer = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
                            final View attachmentView = attachment.getView();
                            attachmentView.measure(viewMeasurer, viewMeasurer);
                            attachmentsLayoutClickable.setLayoutParams(new FrameLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, attachmentView.getMeasuredHeight()));
                            if (attachmentsLayoutClickable.getVisibility() == GONE)
                                attachmentsLayoutClickable.setVisibility(VISIBLE);
                            attachment.content = uri;
                            attachment.contentType = contentType;
                            if (attachments == null)
                                attachments = new ArrayList<>();
                            attachments.add(attachment);
                            final View contentLayoutClickableAll = findViewById(R.id.email_message_composing_content_layout_clickable_all);
                            if (!attachments.isEmpty()) {
                                if (contentLayoutClickableAll.getVisibility() == VISIBLE) {
                                    contentLayoutClickableAll.setVisibility(GONE);
                                    final View contentLayoutClickableText = findViewById(R.id.email_message_composing_content_layout_clickable_text);
                                    contentLayoutClickableText.setOnClickListener(eMailMessageComposingClickListener);
                                    contentLayoutClickableText.bringToFront();
                                }
                            } else {
                                if (contentLayoutClickableAll.getVisibility() == GONE) {
                                    contentLayoutClickableAll.setVisibility(VISIBLE);
                                    contentLayoutClickableAll.bringToFront();
                                    final View contentLayoutClickableText = findViewById(R.id.email_message_composing_content_layout_clickable_text);
                                    contentLayoutClickableText.setVisibility(GONE);
                                }
                            }
                        }
                    }
                });
        View contentLayoutClickableAll = findViewById(R.id.email_message_composing_content_layout_clickable_all);
        contentLayoutClickableAll.setOnClickListener(eMailMessageComposingClickListener);
        getWindow().getDecorView().getViewTreeObserver().addOnGlobalLayoutListener(new EMailService() {
            int previousAdjustDifference;

            public void onGlobalLayout() {
                final View window = getWindow().getDecorView();
                final View rootView = findViewById(R.id.email_message_composing);
                final int windowHeight = window.getHeight();
                adjustDifference = windowHeight - rootView.getHeight();
                final FragmentManager fragmentManager = getSupportFragmentManager();
                if (previousAdjustDifference > 90) {
                    final Fragment enteringFileName = fragmentManager.findFragmentByTag("entering file name");
                    if (enteringFileName != null) {
                        final View enteringFileNameCancel = enteringFileName.getView().findViewById(R.id.email_message_composing_entering_file_name_cancel_layout_clickable);
                        enteringFileNameCancel.performClick();
                    }
                }
                previousAdjustDifference = adjustDifference;
            }
        });
        final GestureDetectorCompat gestureDetector = new GestureDetectorCompat(this, gestureDetectorListener);
        EMailService eMailMessageComposingTouchListener = new EMailService() {

            @Override
            public boolean onTouch(View view, MotionEvent event) {
                return gestureDetector.onTouchEvent(event);
            }
        };
        View attachmentsImageLayoutClickable = findViewById(R.id.email_message_composing_attachment_image_layout_clickable);
        attachmentsImageLayoutClickable.setOnTouchListener(eMailMessageComposingTouchListener);
        View attachmentsDocumentLayoutClickable = findViewById(R.id.email_message_composing_attachment_document_layout_clickable);
        attachmentsDocumentLayoutClickable.setOnTouchListener(eMailMessageComposingTouchListener);
        View attachmentsAudioLayoutClickable = findViewById(R.id.email_message_composing_attachment_audio_layout_clickable);
        attachmentsAudioLayoutClickable.setOnTouchListener(eMailMessageComposingTouchListener);
        View attachmentUnknownLayoutClickable = findViewById(R.id.email_message_composing_attachment_unknown_layout_clickable);
        attachmentUnknownLayoutClickable.setOnTouchListener(eMailMessageComposingTouchListener);
        View layoutClickable = findViewById(R.id.email_message_composing_layout_clickable);
        layoutClickable.setOnTouchListener(eMailMessageComposingTouchListener);
        final View subjectContentLayout = findViewById(R.id.email_message_composing_subject_content_layout);
        subjectContentLayout.bringToFront();
        final int[] location = new int[2];
        subjectContentLayout.getLocationOnScreen(location);
        subjectContentLayoutOriginY = location[1];
    }

    public View getCurrentAttachmentsLayoutClickable(MotionEvent event) {
        final int viewMeasurer = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
        final int[] location = new int[2];
        final float pointerY = event.getRawY();
        int attachmentsLayoutClickableTopY;
        int attachmentsLayoutClickableBottomY;
        int attachmentsLayoutViewsCount;
        final View attachmentsImageLayoutClickable = findViewById(R.id.email_message_composing_attachment_image_layout_clickable);
        attachmentsImageLayoutClickable.getLocationOnScreen(location);
        attachmentsImageLayoutClickable.measure(viewMeasurer, viewMeasurer);
        attachmentsLayoutClickableTopY = location[1];
        // the measuredHeight isn't enough for descend user experience on the real mobile phone screen so it needs 100 to be added
        attachmentsLayoutClickableBottomY = attachmentsLayoutClickableTopY + attachmentsImageLayoutClickable.getMeasuredHeight() + 100;
        if (pointerY >= attachmentsLayoutClickableTopY && pointerY <= attachmentsLayoutClickableBottomY) {
            attachmentsLayoutViewsCount = ((LinearLayout) findViewById(R.id.email_message_composing_attachment_image_layout)).getChildCount();
            if (attachmentsLayoutViewsCount > 0)
                return attachmentsImageLayoutClickable;
        }
        final View attachmentsDocumentLayoutClickable = findViewById(R.id.email_message_composing_attachment_document_layout_clickable);
        attachmentsDocumentLayoutClickable.getLocationOnScreen(location);
        attachmentsDocumentLayoutClickable.measure(viewMeasurer, viewMeasurer);
        attachmentsLayoutClickableTopY = location[1];
        attachmentsLayoutClickableBottomY = attachmentsLayoutClickableTopY + attachmentsDocumentLayoutClickable.getMeasuredHeight() + 100;
        if (pointerY >= attachmentsLayoutClickableTopY && pointerY <= attachmentsLayoutClickableBottomY) {
            attachmentsLayoutViewsCount = ((LinearLayout) findViewById(R.id.email_message_composing_attachment_document_layout)).getChildCount();
            if (attachmentsLayoutViewsCount > 0)
                return attachmentsDocumentLayoutClickable;
        }
        final View attachmentsAudioLayoutClickable = findViewById(R.id.email_message_composing_attachment_audio_layout_clickable);
        attachmentsAudioLayoutClickable.getLocationOnScreen(location);
        attachmentsAudioLayoutClickable.measure(viewMeasurer, viewMeasurer);
        attachmentsLayoutClickableTopY = location[1];
        attachmentsLayoutClickableBottomY = attachmentsLayoutClickableTopY + attachmentsAudioLayoutClickable.getMeasuredHeight() + 100;
        if (pointerY >= attachmentsLayoutClickableTopY && pointerY <= attachmentsLayoutClickableBottomY) {
            attachmentsLayoutViewsCount = ((LinearLayout) findViewById(R.id.email_message_composing_attachment_audio_layout)).getChildCount();
            if (attachmentsLayoutViewsCount > 0)
                return attachmentsAudioLayoutClickable;
        }
        final View attachmentsUnknownLayoutClickable = findViewById(R.id.email_message_composing_attachment_unknown_layout_clickable);
        return attachmentsUnknownLayoutClickable;
    }


    public void toggleKeyboard(@NonNull View view, boolean show) {
        if (!view.isFocusable()) {
            view.setFocusableInTouchMode(true);
            view.setFocusable(true);
        }
        view.requestFocus();
        InputMethodManager keyboard = getApplicationContext().getSystemService(InputMethodManager.class);
        if (show) {
            view.requestFocus();
            keyboard.showSoftInput(view, InputMethodManager.SHOW_FORCED);
        } else {
            keyboard.hideSoftInputFromWindow(view.getWindowToken(), 0);
            view.clearFocus();
        }
    }

    public void deleteRecipientsLayoutPart(@NonNull LayoutPart layoutPart) {
        View layoutPartFrame = (View) layoutPart.getView().getParent();
        getSupportFragmentManager().beginTransaction()
                .remove(layoutPart)
                .commitNow();
        final HashMap<String, Object> recipientsLayoutData = getRecipientsLayoutData(0);
        final LinearLayout currentRecipientsLayout = (LinearLayout) recipientsLayoutData.get("layout");
        currentRecipientsLayout.removeView(layoutPartFrame);
        recipientsLayoutParts.remove(layoutPart, recipientsLayoutParts.get(layoutPart));
    }

    public void setModeEditLayoutPartOn(LayoutPart recipientsLayoutPart) {
        HashMap<String, Object> recipientsLayoutData = getRecipientsLayoutData(0);
        String recipientType = (String) recipientsLayoutData.get("type");
        if (!modeEditLayoutPartOn) {
            modeEditLayoutPartOn = true;
            removeRecipientsLayoutEnter((LinearLayout) recipientsLayoutData.get("layout"), (RecipientsLayoutEnter) recipientsLayoutData.get("enter"));
        } else
            makeRecipientsLayoutPart((RecipientsLayoutEnter) recipientsLayoutData.get("enter"), (String) recipientsLayoutData.get("type"));
        editRecipientsLayoutPart(recipientsLayoutPart, recipientType);
    }

    public void editRecipientsLayoutPart(LayoutPart recipientsLayoutPart, String recipientType) {
        FrameLayout recipientsLayoutPartFrame = (FrameLayout) recipientsLayoutPart.getView().getParent();
        RecipientsLayoutEnter recipientsLayoutEnter = new RecipientsLayoutEnter(recipientsLayoutPartFrame, recipientsLayoutTextChangedListener);
        final String eMailAddress = recipientsLayoutPart.eMailAddress;
        recipientsLayoutEnter.setEMailAddress(eMailAddress);
        recipientsLayoutPart.getView().setAlpha(0);
        getSupportFragmentManager().beginTransaction()
                .replace(recipientsLayoutPartFrame.getId(), recipientsLayoutEnter, recipientType)
                .commitNow();
        recipientsLayoutEnter.enter.setFocusableInTouchMode(true);
        recipientsLayoutEnter.enter.setFocusable(true);
        toggleKeyboard(recipientsLayoutEnter.enter, true);
        recipientsLayoutParts.remove(recipientsLayoutPart, recipientsLayoutParts.get(recipientsLayoutPart));
    }

    public void makeRecipientsLayoutPart(RecipientsLayoutEnter recipientsLayoutEnter, String recipientType) {
        final String recipientsLayoutEnterText = recipientsLayoutEnter.enter.getText().toString();
        final boolean toLayoutEnterTextHasEndSpace = recipientsLayoutEnterText.charAt(recipientsLayoutEnterText.length() - 1) == ' ';
        final String eMailAddress;
        if (toLayoutEnterTextHasEndSpace)
            eMailAddress = getEMailAddressWithNoSpace(recipientsLayoutEnter.enter.getText().toString());
        else
            eMailAddress = recipientsLayoutEnterText;
        LayoutPart recipientsLayoutPart = getLayoutPart(eMailAddress, recipientType);
        recipientsLayoutEnter.getView().setAlpha(0);
        getSupportFragmentManager().beginTransaction()
                .replace(recipientsLayoutEnter.parent.getId(), recipientsLayoutPart)
                .commitNow();
    }

    public void removeRecipientsLayoutEnter(LinearLayout recipientsLayout, RecipientsLayoutEnter recipientsLayoutEnter) {
        getSupportFragmentManager().beginTransaction()
                .remove(recipientsLayoutEnter)
                .commitNow();
        recipientsLayout.removeView(recipientsLayoutEnter.parent);
    }

    public void addRecipientsLayoutPart(LinearLayout recipientsLayout, String recipientType, String eMailAddress, int count) {
        final FrameLayout recipientsLayoutPartFrame = new FrameLayout(this);
        recipientsLayout.addView(recipientsLayoutPartFrame, count);
        recipientsLayoutPartFrame.setId(View.generateViewId());
        getSupportFragmentManager().beginTransaction()
                .add(recipientsLayoutPartFrame.getId(), getLayoutPart(eMailAddress, recipientType))
                .commitNow();
    }

    public LayoutPart getLayoutPart(String eMailAddress, String recipientType) {
        final LayoutPart recipientsLayoutPart = new LayoutPart();
        if (EMailService.eMailAddressValid(eMailAddress))
            recipientsLayoutPart.setLayoutPartData(eMailAddress, true, false);
        else
            recipientsLayoutPart.setLayoutPartData(eMailAddress, false, false);
        if (recipientsLayoutParts == null)
            recipientsLayoutParts = new HashMap<>();
        recipientsLayoutParts.put(recipientsLayoutPart, recipientType);
        return recipientsLayoutPart;
    }

    public String getEMailAddressWithNoSpace(String eMailAddress) {
        String eMailAddressWithNoSpace = new StringBuilder(eMailAddress)
                .deleteCharAt(eMailAddress.length() - 1)
                .toString();
        return eMailAddressWithNoSpace;
    }

    public void changeFileName(Attachment attachment) {
        View popUpWindowLayout = findViewById(R.id.email_message_composing_pop_up_window_layout);
        EnteringFileName enteringFileName = new EnteringFileName(this, popUpWindowLayout);
        enteringFileName.changingFileName = true;
        enteringFileName.attachmentToEnterFileName = attachment;
        popUpWindowLayout.setVisibility(VISIBLE);
        getSupportFragmentManager().beginTransaction()
                .add(enteringFileName.parent.getId(), enteringFileName, "entering file name")
                .commitNow();
    }


    public Animation createPopUpWindowAnimation(View fragmentView, boolean enter) {
        final int animationId = R.anim.plug;
        final Animation animation = AnimationUtils.loadAnimation(this, animationId);
        animation.setAnimationListener(new EMailService() {

            public void onAnimationEnd(Animation animation) {
                final float alphaFrom;
                final float alphaTo;
                final long postDelayed;
                final View eMailMessageComposingPopUpWindowLayout = findViewById(R.id.email_message_composing_pop_up_window_layout);
                final View eMailMessageComposingShadow = findViewById(R.id.email_message_composing_shadow);
                final FragmentManager fragmentManager = getSupportFragmentManager();
                final EnteringFileName enteringFileName = (EnteringFileName) fragmentManager.findFragmentByTag("entering file name");
                if (enter) {
                    final View window = getWindow().getDecorView();
                    final float windowMiddle;
                    if (enteringFileName != null) {
                        toggleKeyboard(enteringFileName.enter, true);
                        windowMiddle = window.getHeight() / (float) 2 + 90;
                    } else
                        windowMiddle = window.getHeight() / (float) 2 - eMailMessageComposingPopUpWindowLayout.getHeight() + 110;
                    eMailMessageComposingPopUpWindowLayout.setY(windowMiddle);
                    fragmentView.setAlpha(0);
                    eMailMessageComposingPopUpWindowLayout.setVisibility(VISIBLE);
                    eMailMessageComposingShadow.setVisibility(VISIBLE);
                    alphaFrom = 0;
                    alphaTo = 1;
                    postDelayed = 150;
                } else {
                    alphaFrom = 1;
                    alphaTo = 0;
                    postDelayed = 0;
                }
                final ValueAnimator fragmentAnimator = ValueAnimator.ofFloat().setDuration(100);
                fragmentAnimator.addUpdateListener(new EMailService() {
                    final View view = new WeakReference<>(fragmentView).get();

                    public void onAnimationUpdate(ValueAnimator animator) {
                        final float animatedAlphaValue = (float) animator.getAnimatedValue();
                        final View eMailMessageComposingShadow = findViewById(R.id.email_message_composing_shadow);
                        eMailMessageComposingShadow.setAlpha(animatedAlphaValue);
                        view.setAlpha(animatedAlphaValue);
                    }
                });
                fragmentAnimator.addListener(new EMailService() {
                    public void onAnimationEnd(Animator animator) {
                        if (!enter) {
                            final View eMailMessageComposingSend = findViewById(R.id.email_message_composing_send);
                            if (!eMailMessageComposingSend.isClickable())
                                eMailMessageComposingSend.setClickable(true);
                            final View eMailMessageComposingShadow = findViewById(R.id.email_message_composing_shadow);
                            eMailMessageComposingShadow.setVisibility(GONE);
                            final View eMailMessageComposingPopUpWindowLayout = findViewById(R.id.email_message_composing_pop_up_window_layout);
                            // postDelayed is needed here to make sure this layout gets GONE only when
                            // the fragment which container it is finishes its lifecycle
                            eMailMessageComposingPopUpWindowLayout.postDelayed((Runnable) () -> {
                                eMailMessageComposingPopUpWindowLayout.setVisibility(GONE);
                            }, 300);
                        }
                    }
                });
                fragmentAnimator.setFloatValues(alphaFrom, alphaTo);
                getWindow().getDecorView().postDelayed((Runnable) fragmentAnimator::start, postDelayed);
            }
        });
        return animation;
    }

    public HashMap<String, Object> getRecipientsLayoutData(int currentRecipientsLayoutClickableId) {
        final HashMap<String, Object> recipientsLayoutData = new HashMap<>();
        final int currentRecipientsLayoutId;
        if (currentRecipientsLayoutClickableId == 0)
            currentRecipientsLayoutId = ((View) getCurrentFocus().getParent().getParent().getParent()).getId();
        else
            currentRecipientsLayoutId = 0;
        if (currentRecipientsLayoutClickableId == R.id.email_message_composing_to_layout_clickable ||
                currentRecipientsLayoutId == R.id.email_message_composing_to_layout) {
            LinearLayout toLayout = findViewById(R.id.email_message_composing_to_layout);
            recipientsLayoutData.put("layout", toLayout);
            Fragment toLayoutEnter = getSupportFragmentManager().findFragmentByTag("To");
            recipientsLayoutData.put("enter", toLayoutEnter);
            recipientsLayoutData.put("type", "To");
            View toLayoutClickable = findViewById(R.id.email_message_composing_to_layout_clickable);
            recipientsLayoutData.put("layout clickable", toLayoutClickable);
        } else if (currentRecipientsLayoutClickableId == R.id.email_message_composing_bcc_layout_clickable ||
                currentRecipientsLayoutId == R.id.email_message_composing_bcc_layout) {
            LinearLayout bccLayout = findViewById(R.id.email_message_composing_bcc_layout);
            recipientsLayoutData.put("layout", bccLayout);
            Fragment bccLayoutEnter = getSupportFragmentManager().findFragmentByTag("Bcc");
            recipientsLayoutData.put("enter", bccLayoutEnter);
            recipientsLayoutData.put("type", "Bcc");
            View bccLayoutClickable = findViewById(R.id.email_message_composing_bcc_layout_clickable);
            recipientsLayoutData.put("layout clickable", bccLayoutClickable);
        } else {
            LinearLayout ccLayout = findViewById(R.id.email_message_composing_cc_layout);
            recipientsLayoutData.put("layout", ccLayout);
            Fragment ccLayoutEnter = getSupportFragmentManager().findFragmentByTag("Cc");
            recipientsLayoutData.put("enter", ccLayoutEnter);
            recipientsLayoutData.put("type", "Cc");
            View ccLayoutClickable = findViewById(R.id.email_message_composing_cc_layout_clickable);
            recipientsLayoutData.put("layout clickable", ccLayoutClickable);
        }
        return recipientsLayoutData;
    }

    public void makeCurrentFocusLayoutClickableVisible(@NonNull View currentFocus) {
        final int currentFocusId = currentFocus.getId();
        final EditText currentEnter;
        if (currentFocusId == R.id.email_message_composing_subject) {
            View subjectLayoutClickable = findViewById(R.id.email_message_composing_subject_layout_clickable);
            subjectLayoutClickable.setVisibility(VISIBLE);
            currentEnter = findViewById(R.id.email_message_composing_subject);
        } else if (currentFocusId == R.id.email_message_composing_content) {
            final View contentLayoutClickable;
            if (attachments == null || attachments.isEmpty())
                contentLayoutClickable = findViewById(R.id.email_message_composing_content_layout_clickable_all);
            else
                contentLayoutClickable = findViewById(R.id.email_message_composing_content_layout_clickable_text);
            contentLayoutClickable.setVisibility(VISIBLE);
            currentEnter = findViewById(R.id.email_message_composing_content);
        } else {
            final int currentRecipientsLayoutId = ((View) currentFocus.getParent().getParent().getParent()).getId();
            final RecipientsLayoutEnter currentRecipientsLayoutEnter;
            if (currentRecipientsLayoutId == R.id.email_message_composing_to_layout) {
                final View toLayoutClickable = findViewById(R.id.email_message_composing_to_layout_clickable);
                toLayoutClickable.setVisibility(VISIBLE);
                currentRecipientsLayoutEnter = (RecipientsLayoutEnter) getSupportFragmentManager().findFragmentByTag("To");
            } else {
                if (currentRecipientsLayoutId == R.id.email_message_composing_bcc_layout) {
                    final View bccLayoutClickable = findViewById(R.id.email_message_composing_bcc_layout_clickable);
                    bccLayoutClickable.setVisibility(VISIBLE);
                    currentRecipientsLayoutEnter = (RecipientsLayoutEnter) getSupportFragmentManager().findFragmentByTag("Bcc");
                } else {
                    final View ccLayoutClickable = findViewById(R.id.email_message_composing_cc_layout_clickable);
                    ccLayoutClickable.setVisibility(VISIBLE);
                    currentRecipientsLayoutEnter = (RecipientsLayoutEnter) getSupportFragmentManager().findFragmentByTag("Cc");
                }
            }
            currentEnter = currentRecipientsLayoutEnter.enter;
            final String currentRecipientsLayoutEnterText = currentRecipientsLayoutEnter.enter.getText().toString();
            final HashMap<String, Object> recipientsLayoutData = getRecipientsLayoutData(0);
            if (!currentRecipientsLayoutEnterText.isEmpty()) {
                final String enterEMailAddress = getString(R.string.enter_email_address);
                if (!currentRecipientsLayoutEnterText.equals(enterEMailAddress)) {
                    final String recipientType = (String) recipientsLayoutData.get("type");
                    makeRecipientsLayoutPart(currentRecipientsLayoutEnter, recipientType);
                }
            } else {
                final LinearLayout currentRecipientsLayout = (LinearLayout) recipientsLayoutData.get("layout");
                final int currentRecipientsLayoutViewsCount = currentRecipientsLayout.getChildCount();
                if (currentRecipientsLayoutViewsCount != 1)
                    removeRecipientsLayoutEnter((LinearLayout) recipientsLayoutData.get("layout"), currentRecipientsLayoutEnter);
            }
        }
        currentEnter.setFocusable(false);
        currentFocus.clearFocus();
    }

    @Override
    public void onBackPressed() {
        final View currentFocus = getCurrentFocus();
        if (currentFocus != null) {
            lastFocusForOnBackPressed = currentFocus;
            makeCurrentFocusLayoutClickableVisible(currentFocus);
            currentFocus.clearFocus();
            final FragmentManager fragmentManager = getSupportFragmentManager();
            final Fragment enteringFileName = fragmentManager.findFragmentByTag("entering file name");
            if (enteringFileName != null) {
                fragmentManager.beginTransaction()
                        .remove(enteringFileName)
                        .commitNow();
            }
            return;
        }
        if (lastFocusForOnBackPressed != null) {
            final int lastFocusId = ((View) lastFocusForOnBackPressed.getParent().getParent().getParent()).getId();
            final int currentRecipientsLayoutClickableId;
            if (lastFocusId == R.id.email_message_composing_to_layout)
                currentRecipientsLayoutClickableId = R.id.email_message_composing_to_layout_clickable;
            else if (lastFocusId == R.id.email_message_composing_bcc_layout)
                currentRecipientsLayoutClickableId = R.id.email_message_composing_bcc_layout_clickable;
            else if (lastFocusId == R.id.email_message_composing_cc_layout)
                currentRecipientsLayoutClickableId = R.id.email_message_composing_cc_layout_clickable;
            else
                return;
            final HashMap<String, Object> recipientsLayoutData = getRecipientsLayoutData(currentRecipientsLayoutClickableId);
            if (modeEditLayoutPartOn) {
                final RecipientsLayoutEnter currentRecipientsLayoutEnter = (RecipientsLayoutEnter) recipientsLayoutData.get("enter");
                String currentRecipientsLayoutEnterText = currentRecipientsLayoutEnter.enter.getText().toString();
                if (currentRecipientsLayoutEnterText.isEmpty()) {
                    final LinearLayout currentRecipientsLayout = (LinearLayout) recipientsLayoutData.get("layout");
                    final int currentRecipientsLayoutViewsCount = currentRecipientsLayout.getChildCount();
                    if (currentRecipientsLayoutViewsCount != 1)
                        removeRecipientsLayoutEnter(currentRecipientsLayout,
                                (RecipientsLayoutEnter) recipientsLayoutData.get("enter"));
                } else
                    makeRecipientsLayoutPart((RecipientsLayoutEnter) recipientsLayoutData.get("enter"), (String) recipientsLayoutData.get("type"));
                modeEditLayoutPartOn = false;
                return;
            }
            final RecipientsLayoutEnter currentRecipientsLayoutEnter = (RecipientsLayoutEnter) recipientsLayoutData.get("enter");
            final boolean enterIsFirstView = currentRecipientsLayoutEnter != null;
            if (enterIsFirstView) {
                final LinearLayout currentRecipientsLayout = (LinearLayout) recipientsLayoutData.get("layout");
                final int currentRecipientsLayoutViewsCount = currentRecipientsLayout.getChildCount();
                final String currentRecipientsLayoutEnterText = currentRecipientsLayoutEnter.enter.getText().toString();
                if (currentRecipientsLayoutViewsCount == 1) {
                    if (!currentRecipientsLayoutEnterText.isEmpty()) {
                        makeRecipientsLayoutPart((RecipientsLayoutEnter) recipientsLayoutData.get("enter"), (String) recipientsLayoutData.get("type"));
                        return;
                    }
                } else {
                    if (currentRecipientsLayoutEnterText.isEmpty())
                        removeRecipientsLayoutEnter((LinearLayout) recipientsLayoutData.get("layout"),
                                (RecipientsLayoutEnter) recipientsLayoutData.get("enter"));
                    else
                        makeRecipientsLayoutPart((RecipientsLayoutEnter) recipientsLayoutData.get("enter"), (String) recipientsLayoutData.get("type"));
                    return;
                }
            }
        }
        final FragmentManager fragmentManager = getSupportFragmentManager();
        final Fragment attachmentMenu = fragmentManager.findFragmentByTag("attachment menu");
        if (attachmentMenu != null) {
            fragmentManager.beginTransaction()
                    .remove(attachmentMenu)
                    .commitNow();
            return;
        }
        Intent intent = new Intent(this, MenuMain.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
    }

    public static class RecipientsLayoutEnter extends Fragment {
        View parent;
        EMailService toLayoutTextChangedListener;
        private String eMailAddress;
        EditText enter;

        public RecipientsLayoutEnter(View parent, EMailService toLayoutTextChangedListener) {
            this.parent = parent;
            this.toLayoutTextChangedListener = toLayoutTextChangedListener;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.recipients_layout_enter, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            enter = view.findViewById(R.id.enter);
            enter.setFocusable(false);
            if (eMailAddress != null)
                enter.setText(eMailAddress);
            enter.addTextChangedListener(toLayoutTextChangedListener);
        }

        public void setEMailAddress(String eMailAddress) {
            this.eMailAddress = eMailAddress;
        }
    }

    public static class AttachmentMenu extends Fragment {
        EMailMessageComposing eMailMessageComposing;
        Drawable background;
        View parent;

        public AttachmentMenu(EMailMessageComposing eMailMessageComposing, View parent, Drawable background) {
            this.eMailMessageComposing = eMailMessageComposing;
            this.parent = parent;
            this.background = background;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_composing_attachment_menu, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            View document = view.findViewById(R.id.email_message_composing_attachment_menu_document_layout_clickable);
            View image = view.findViewById(R.id.email_message_composing_attachment_menu_image_layout_clickable);
            EMailService attachmentMenuClickListener = new EMailService() {
                public void onClick(View view) {
                    final int viewId = view.getId();
                    if (viewId == document.getId())
                        eMailMessageComposing.resultLauncher.launch("application/*");
                    else if (viewId == image.getId())
                        eMailMessageComposing.resultLauncher.launch("image/*");
                    else
                        eMailMessageComposing.resultLauncher.launch("audio/*");
                    final View eMailMessageComposingCurrentFocus = eMailMessageComposing.getCurrentFocus();
                    if (eMailMessageComposingCurrentFocus != null) {
                        eMailMessageComposing.toggleKeyboard(eMailMessageComposingCurrentFocus, false);
                    }
                    eMailMessageComposing.getSupportFragmentManager().beginTransaction()
                            .remove(AttachmentMenu.this)
                            .commitNow();
                }
            };
            document.setOnClickListener(attachmentMenuClickListener);
            image.setOnClickListener(attachmentMenuClickListener);
            View audio = view.findViewById(R.id.email_message_composing_attachment_menu_audio_layout_clickable);
            audio.setOnClickListener(attachmentMenuClickListener);
        }

        public Animation onCreateAnimation(int anim, boolean enter, int animNext) {
            final int animationId;
            if (enter)
                animationId = R.anim.slide_top_bottom_fade_invisible_visible;
            else
                animationId = R.anim.slide_bottom_top_fade_visible_invisible;
            final Animation animation = AnimationUtils.loadAnimation(eMailMessageComposing, animationId);
            animation.setAnimationListener(new EMailService() {
                public void onAnimationStart(Animation animation) {
                    if (!enter)
                        parent.setBackground(null);
                }

                public void onAnimationEnd(Animation animation) {
                    if (enter)
                        parent.setBackground(background);
                }
            });
            return animation;
        }
    }

    public static class Attachment extends Fragment {
        EMailMessageComposing eMailMessageComposing;
        Drawable iconImage;
        Uri content;
        String contentType;
        TextView fileName;
        ImageView addFileName;

        public Attachment(EMailMessageComposing eMailMessageComposing, Drawable iconImage) {
            this.eMailMessageComposing = eMailMessageComposing;
            this.iconImage = iconImage;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_composing_attachment, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            ImageView icon = view.findViewById(R.id.email_message_composing_attachment);
            icon.setImageDrawable(iconImage);
            fileName = view.findViewById(R.id.email_message_composing_attachment_file_name);
            addFileName = view.findViewById(R.id.email_message_composing_attachment_add_file_name);
            System.out.println("hello");
            if (addFileName.getVisibility() == GONE) {
                if (fileName.getText().toString().isEmpty()) {
                    fileName.setVisibility(GONE);
                    addFileName.setVisibility(VISIBLE);
                }
                EMailService attachmentClickListener = new EMailService() {

                    @Override
                    public void onClick(View view) {
                        final int viewId = view.getId();
                        if (viewId == R.id.email_message_composing_attachment_file_name_layout_clickable)
                            eMailMessageComposing.changeFileName(Attachment.this);
                        else {
                            Intent intent = new Intent(Intent.ACTION_VIEW, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                            intent.setData(content);
                            eMailMessageComposing.startActivity(intent);
                        }
                    }
                };
                final View fileNameLayoutClickable = view.findViewById(R.id.email_message_composing_attachment_file_name_layout_clickable);
                fileNameLayoutClickable.setOnClickListener(attachmentClickListener);
                final View attachmentLayoutClickable = view.findViewById(R.id.email_message_composing_attachment_layout_clickable);
                attachmentLayoutClickable.setOnClickListener(attachmentClickListener);
            }
        }
    }

    public static class EnteringFileName extends Fragment {
        EMailMessageComposing eMailMessageComposing;
        Attachment attachmentToEnterFileName;
        EditText enter;
        View parent;
        boolean changingFileName;

        public EnteringFileName(EMailMessageComposing eMailMessageComposing, View parent) {
            this.eMailMessageComposing = eMailMessageComposing;
            this.parent = parent;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_composing_entering_file_name, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            View eMailMessageComposingCurrentFocus = eMailMessageComposing.getCurrentFocus();
            if (eMailMessageComposingCurrentFocus != null)
                eMailMessageComposingCurrentFocus.clearFocus();
            View ok = view.findViewById(R.id.email_message_composing_entering_file_name_ok_layout_clickable);
            View cancel = view.findViewById(R.id.email_message_composing_entering_file_name_cancel_layout_clickable);
            EMailService enteringFileNameClickListener = new EMailService() {
                public void onClick(View view) {
                    final int viewId = view.getId();
                    if (viewId == ok.getId()) {
                        final String enterText = enter.getText().toString();
                        attachmentToEnterFileName.fileName.setText(enterText);
                        if (enterText.isEmpty()) {
                            if (attachmentToEnterFileName.addFileName.getVisibility() == GONE) {
                                attachmentToEnterFileName.fileName.setVisibility(GONE);
                                attachmentToEnterFileName.addFileName.setVisibility(VISIBLE);
                            }
                        } else {
                            if (attachmentToEnterFileName.fileName.getVisibility() == GONE) {
                                attachmentToEnterFileName.addFileName.setVisibility(GONE);
                                attachmentToEnterFileName.fileName.setVisibility(VISIBLE);
                            }
                        }
                    } else if (!changingFileName) {
                        attachmentToEnterFileName.fileName.setVisibility(GONE);
                        attachmentToEnterFileName.addFileName.setVisibility(VISIBLE);
                    }
                    changingFileName = false;
                    eMailMessageComposing.getSupportFragmentManager().beginTransaction()
                            .remove(EnteringFileName.this)
                            .commitNow();
                    View eMailMessageComposingCurrentFocus = eMailMessageComposing.getCurrentFocus();
                    if (eMailMessageComposingCurrentFocus != null)
                        eMailMessageComposingCurrentFocus.clearFocus();
                }
            };
            ok.setOnClickListener(enteringFileNameClickListener);
            cancel.setOnClickListener(enteringFileNameClickListener);
            enter = view.findViewById(R.id.email_message_composing_entering_file_name_enter);
        }


        public void onStart() {
            enter.requestFocus();
            enter.postDelayed((Runnable) () -> {
                eMailMessageComposing.toggleKeyboard(enter, true);
            }, 100);
            if (changingFileName) {
                enter.setText(attachmentToEnterFileName.fileName.getText().toString());
            }
            super.onStart();
        }

        public void setAttachmentToEnterFileName(Attachment attachmentIconToEnterFileName) {
            this.attachmentToEnterFileName = attachmentIconToEnterFileName;
        }

        public Animation onCreateAnimation(int anim, boolean enter, int animNext) {
            if (!enter) {
                eMailMessageComposing.toggleKeyboard(this.enter, false);
            }
            return eMailMessageComposing.createPopUpWindowAnimation(getView(), enter);
        }
    }

    public static class ConfirmingSendingEmptyMessage extends Fragment {
        EMailMessageComposing eMailMessageComposing;
        View yes;
        View no;

        public ConfirmingSendingEmptyMessage(EMailMessageComposing eMailMessageComposing) {
            this.eMailMessageComposing = eMailMessageComposing;
        }

        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_composing_confirming_sending_empty_message, container, false);
        }

        public void onViewCreated(View view, Bundle savedInstanceState) {
            yes = view.findViewById(R.id.email_message_composing_confirming_sending_empty_message_yes);
            no = view.findViewById(R.id.email_message_composing_confirming_sending_empty_message_no);
        }

        public Animation onCreateAnimation(int anim, boolean enter, int animNext) {
            return eMailMessageComposing.createPopUpWindowAnimation(getView(), enter);
        }
    }

    public static class EMailMessageSending extends Fragment {
        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.email_message_sending, container, false);
        }
    }

    public static class CcBcc extends Fragment {
        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            return inflater.inflate(R.layout.cc_bcc, container, false);
        }
    }
}
